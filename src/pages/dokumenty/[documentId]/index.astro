---
import Layout from "../../../layouts/App.astro";
import { getEntry } from "astro:content";
import pageTitle from "@utils/pageTitle";
import formatNumber from "@utils/number";
import Stripe from "stripe";
import { getSession } from "auth-astro/server";
import { UserRoles } from "@db/user";
//@ts-ignore
import { sanityClient } from "sanity:client";
import type { ImageAsset, Slug } from "@sanity/types";
import BlogPost from "@components/BlogPost.astro";
import { PortableText } from "astro-portabletext";
import type { PortableTextBlock } from "@portabletext/types";

interface Post {
  title: string;
  publishedAt: string;
  slug: Slug;
  mainImage?: ImageAsset;
  excerpt: string;
}

interface Document {
  title: string;
  draft: string;
  body: PortableTextBlock[];
  memberContent: boolean;
  keywords?: string;
  description?: string;
  posts: Post[];
}

const { documentId: dId } = Astro.params;
const documentId = String(dId);

const session = await getSession(Astro.request);
const isAdmin = session?.user?.role === UserRoles.admin;

const allPostQuery = `_type=='post' && references(^._id) && defined(publishedAt)`;
const postQuery = session
  ? allPostQuery
  : `${allPostQuery} && (memberContent == false || !defined(memberContent))`;

const info: Document = await sanityClient.fetch(
  `*[_type == 'legalDocument' && slug.current == "${documentId}"] { 
      title, 
      "draft": !publishedAt, 
      body,
      memberContent,
      keywords,
      description,
      "posts": *[${postQuery}] | order(publishedAt desc) [0..2] { 
        title, 
        mainImage, 
        publishedAt,
        slug,
        "excerpt": array::join(string::split((pt::text(body)), "")[0..255], "") + "..."
      }
  }[0]`
);

const document = await getEntry("documents", documentId);

if (!info || !document) {
  return Astro.redirect("/404");
}

const { title, body, draft, memberContent, keywords, description, posts } =
  info;
const { index, priceId } = document.data;

if (draft) {
  if (!session || isAdmin) {
    return Astro.redirect("/404");
  }
}

if (memberContent && !session) {
  return Astro.redirect("/zaloguj-sie");
}

const stripe = new Stripe(import.meta.env.STRIPE_API_KEY, {
  apiVersion: import.meta.env.STRIPE_API_V,
});

const documentPrice = await stripe.prices.retrieve(priceId);
const price = documentPrice.unit_amount ? documentPrice.unit_amount / 100 : 0;

if (!index) {
  return Astro.redirect("/404");
}

const firstQuestionUrl = `${Astro.url.origin}/dokumenty/${documentId}/${index[0].questions[0].id.slug}`;
---

<Layout title={pageTitle(title)} keyword={keywords} description={description}>
  <span slot="topbar-title">{title}</span>
  <section>
    <header>
      <h1>{title}</h1>
      <span>
        <small>Cena za 1 dokument:</small>
        <strong>{formatNumber(price)} zł</strong>
      </span>
      <a href={firstQuestionUrl}>Stwórz dokument</a>
    </header>
    <hr />
    <article class="prose">
      <PortableText value={body} />
    </article>
    {
      posts.length && (
        <>
          <hr />
          <aside>
            <h4>Powiązane artykuły</h4>
            <div>
              {posts.map(
                ({
                  title,
                  slug: { current: url },
                  publishedAt,
                  mainImage,
                  excerpt,
                }) => (
                  <BlogPost
                    title={title}
                    url={url}
                    publishedAt={publishedAt}
                    mainImage={mainImage}
                    excerpt={excerpt}
                    size="small"
                  />
                )
              )}
            </div>
          </aside>
        </>
      )
    }
    <footer>
      <a href={firstQuestionUrl}>Stwórz dokument</a>
    </footer>
  </section>
</Layout>

<style>
  section {
    @apply bg-white rounded-lg p-20 sm:p-40 my-20 flex flex-col gap-30 max-w-[1000px];
  }

  header {
    @apply flex items-center gap-15 lg:gap-30 flex-wrap;
  }

  header h1 {
    @apply flex-grow;
    @apply text-2xl;
    @apply w-full lg:w-auto;
  }

  header span {
    @apply flex flex-col lg:items-end flex-grow;
  }

  header span strong {
    @apply text-lg;
  }

  footer a,
  header a {
    @apply btn btn-default btn-big;
  }

  hr {
    @apply border-dark30;
  }

  footer {
    @apply p-20 flex justify-center;
  }

  footer a {
    @apply btn-big;
  }

  aside > div {
    @apply grid sm:grid-cols-2 lg:grid-cols-3 gap-20;
    @apply pt-10;
  }
</style>
