---
import Fuse from "fuse.js";
import { Icon } from "astro-icon";
import { getCollection } from "astro:content";
import Layout from "../../layouts/App.astro";
import DocumentTile from "../../components/DocumentTile.astro";
import EmptyScreen from "../../components/EmptyScreen.astro";
import trimWhitespace from "../../utils/whitespace";

const PAGE_TITLE = "Wszystkie dokumenty";

const url = new URL(Astro.request.url);
const currentCat = url.searchParams.get("kategoria");
const search = url.searchParams.get("szukaj");

const categories = await getCollection("categories");
const documents = await getCollection("documents", ({ data: { categories } }) =>
  currentCat ? categories.find(({ id }) => id === currentCat) : true
);

const fuse = new Fuse(documents, {
  keys: ["data.title", "data.keywords"],
  threshold: 0.5,
});
const filteredDocs = fuse.search(search ? trimWhitespace(search) : "");

const currentCategory = categories.find(({ id }) => id === currentCat);
const title = currentCategory ? currentCategory.data.name : PAGE_TITLE;
---

<Layout title={`${title} - Prawniczek`}>
  <span slot="topbar-title">{title}</span>
  <header slot="content-header">
    <search-documents>
      <form method="GET" action={Astro.request.url}>
        <input
          type="search"
          placeholder="Wyszukaj dokument lub sprawę np. umowa najmu, testament"
          spellcheck="false"
          name="szukaj"
          value={search ? trimWhitespace(search) : ""}
        />
        {
          currentCat && (
            <input type="hidden" name="kategoria" value={currentCat} />
          )
        }
        <Icon name="search" width={24} height={24} />
      </form>
      {search && <button>Wyczyść</button>}
    </search-documents>
    <category-selector>
      <label for="category">Kategorie</label>
      <select id="category">
        <option value="">Wszystkie</option>
        {
          categories.map(({ id, data: { name } }) => (
            <option value={id} selected={id === currentCat}>
              {name}
            </option>
          ))
        }
      </select>
    </category-selector>
  </header>
  {
    documents.length ? (
      search ? (
        filteredDocs.length ? (
          <section>
            {filteredDocs.map(
              ({
                item: {
                  slug,
                  data: { title, categories: cats },
                },
              }) => (
                <DocumentTile
                  slug={slug}
                  title={title}
                  docCategories={cats}
                  categories={categories}
                />
              )
            )}
          </section>
        ) : (
          <EmptyScreen>Brak dokumentów do wyświetlenia</EmptyScreen>
        )
      ) : (
        <section>
          {documents.map(({ slug, data: { title, categories: cats } }) => (
            <DocumentTile
              slug={slug}
              title={title}
              docCategories={cats}
              categories={categories}
            />
          ))}
        </section>
      )
    ) : (
      <EmptyScreen>Brak dokumentów do wyświetlenia</EmptyScreen>
    )
  }
</Layout>

<style>
  header {
    @apply sticky top-[var(--navbar-height)] bg-gray pb-10 flex gap-30;
  }

  section {
    @apply grid md:auto-rows-fr md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 3xl:grid-cols-5 gap-20 w-full;
    @apply pt-10;
  }

  category-selector {
    @apply flex gap-10 items-center;
  }

  search-documents {
    @apply flex-grow;
    @apply flex gap-10 items-center;
  }

  search-documents form {
    @apply flex-grow;
  }

  search-documents form :global(> svg) {
    @apply absolute left-20 top-0 translate-y-1/2;
  }

  search-documents input[type="search"] {
    @apply w-full;
    @apply pl-60;
  }

  search-documents button {
    @apply btn btn-alt;
  }
</style>

<script>
  class CategorySelector extends HTMLElement {
    select: HTMLSelectElement;

    constructor() {
      super();

      this.select = this.querySelector("select") as HTMLSelectElement;
    }

    connectedCallback() {
      this.select.addEventListener("change", (event) => {
        const val = (event.target as HTMLInputElement).value;
        const url = new URL(window.location.href);
        const params = new URLSearchParams(url.search);

        if (val.length) {
          params.set("kategoria", val);
        } else {
          params.delete("kategoria");
        }

        url.search = params.toString();
        document.location = url.toString();
      });
    }
  }
  customElements.define("category-selector", CategorySelector);

  class SearchDocuments extends HTMLElement {
    button: HTMLButtonElement;

    constructor() {
      super();

      this.button = this.querySelector("button");
    }

    connectedCallback() {
      this.button.addEventListener("click", (event) => {
        event.preventDefault();
        const url = new URL(window.location.href);
        const params = new URLSearchParams(url.search);

        params.delete("szukaj");

        url.search = params.toString();
        document.location = url.toString();
      });
    }
  }
  customElements.define("search-documents", SearchDocuments);
</script>
