---
import { DRAFT_SAVED_PARAM, SUCCESS_PARAM } from "@utils/toasts";
import type { UserSession } from "@type";
import {
  deletePaymentSession,
  deleteSessionDocument,
  getPaymentSession,
} from "@db/session";
import * as PARAMS from "@utils/urlParams";
import { UUID } from "mongodb";
import routes from "@utils/routes";
import { postDocument } from "@api/documents";
import { SESSION_COOKIE } from "@utils/cookies";
import { getSession } from "auth-astro/server";
import { boolean } from "astro/zod";
import { UserRoles } from "@db/user";

const urlParams = new URL(Astro.request.url).searchParams;
const draft = String(urlParams.get(PARAMS.DRAFT)) === "true";
const email = urlParams.get(PARAMS.EMAIL) || undefined;
const paymentId = urlParams.get(PARAMS.PAYMENT);

let documentId = urlParams.get(PARAMS.DOCUMENT),
  ssid: UserSession["ssid"] | undefined = undefined,
  modifiedId: UUID | null = null,
  isAdmin = false;

let cookie = Astro.request.headers.get("cookie");

try {
  const session = await getSession(Astro.request);

  if (session) {
    ssid = session?.user?.ssid;
    isAdmin = session?.user?.role === UserRoles.admin;
  }

  if (!draft && !paymentId && !isAdmin) {
    throw new Error();
  }

  if (paymentId) {
    const userSession = await getPaymentSession(paymentId);

    if (userSession) {
      ({ documentId, ssid } = userSession);

      cookie = `${cookie}; ${SESSION_COOKIE}=${ssid}`;
    }
  }

  if (documentId) {
    modifiedId = await postDocument(cookie, documentId, draft, email);
  }

  if (ssid && documentId) {
    await deleteSessionDocument(ssid, documentId);
  }

  if (paymentId) {
    await deletePaymentSession(paymentId);
  }

  let redirectUrl: URL;

  if (draft) {
    redirectUrl = new URL(routes.MY_DOCUMENTS, Astro.url.origin);
    redirectUrl.searchParams.append(DRAFT_SAVED_PARAM, "true");
  } else {
    const upsertedId = modifiedId || documentId;
    redirectUrl = new URL(
      `${routes.DOCUMENTS}/${upsertedId}/${routes.DOCUMENT}`,
      Astro.url.origin
    );
    redirectUrl.searchParams.append(SUCCESS_PARAM, "true");
    if (email) {
      redirectUrl.searchParams.append(PARAMS.EMAIL, encodeURIComponent(email));
    }
  }

  return Astro.redirect(redirectUrl);
} catch (e) {
  if (e instanceof Error) {
    if (e.cause === 303) {
      return Astro.redirect(`${routes.DOCUMENTS}/${documentId}/dokument`);
    }

    if (e.cause === 401) {
      const redirectUrl = new URL(`${routes.SIGN_IN}`, Astro.url.origin);

      redirectUrl.searchParams.append(PARAMS.REDIRECT, routes.DOCUMENT);
      redirectUrl.searchParams.append(PARAMS.DOCUMENT, documentId as string);
      redirectUrl.searchParams.append(PARAMS.DRAFT, "true");

      return Astro.redirect(redirectUrl);
    }
  }

  return Astro.redirect(routes.NOT_FOUND);
}
---
