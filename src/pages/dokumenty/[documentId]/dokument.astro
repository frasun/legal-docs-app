---
import { getEntry } from "astro:content";
import Layout from "../../../layouts/App.astro";
import { getDocument, createDocument } from "../../../../db/document";
import { getSession } from "../../../auth-astro/server";
import { getUserByEmail } from "../../../../db/auth";
import crypt from "../../../utils/crypt";
import { Icon } from "astro-icon";
import { formatDateTime } from "../../../utils/date";

const { documentId: dId } = Astro.params;
const documentId = String(dId);
const session = await getSession(Astro.request);

let data, title;

if (!session) {
  return Astro.redirect(
    `/zaloguj-sie?redirect=dokumenty/${documentId}/dokument`
  );
}

Astro.cookies.delete(documentId);

const user = await getUserByEmail(String(session.user?.email));
const userId = user ? user.id : null;

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  let answers = {};

  formData.forEach((value, key) => (answers[key] = value));

  const document = await createDocument(documentId, answers, userId);

  if (document) {
    return Astro.redirect(
      `${Astro.url.origin}/dokumenty/${document.id}/dokument?success=true`
    );
  } else {
    return Astro.redirect("/404");
  }
}

if (Number(documentId)) {
  data = await getDocument(documentId);

  if (!data || data.draft) {
    return Astro.redirect("/404");
  }

  title = data.title;
} else {
  return Astro.redirect("/404");
}

const { answers, doc: docId, created, modified } = data;

const document = await getEntry("documents", docId);

if (!document) {
  return Astro.redirect("/404");
}

if (!title) title = document.data.title;

const { remarkPluginFrontmatter: qData, Content } = await document.render();
const { encrypted } = document.data;

for (let key of Object.keys(qData.seed)) {
  if (key !== "title") {
    if (encrypted.includes(key)) {
      try {
        qData.seed[key] = crypt.decrypt(answers[key]);
      } catch {
        qData.seed[key] = answers[key];
      }
    } else {
      qData.seed[key] = answers[key];
    }
  }
}

const url = new URL(Astro.request.url);
const urlParams = new URLSearchParams(url.search);
const firstTime = urlParams.get("success") === "true" ? true : false;
---

<Layout title={`Dokument - ${title}`}>
  <span slot="topbar-title">{title}</span>
  <article id="doc" class="prose prose-document" data-title={title}>
    <Content />
  </article>
  <aside>
    <header>
      {
        firstTime ? (
          <>
            <Icon name="big-tick" width={48} height={48} />
            <h3>Twój dokument jest gotowy!</h3>
          </>
        ) : (
          <>
            <Icon name="document" width={48} height={48} />
            <h3>{title}</h3>
          </>
        )
      }
    </header>
    {
      firstTime ? (
        <h6>Wybierz co chcesz teraz zrobić</h6>
      ) : (
        <h6>
          Utworzony{" "}
          <time>
            {modified ? formatDateTime(modified) : formatDateTime(created)}
          </time>
        </h6>
      )
    }
    <download-doc content-id="#doc">
      <button>
        <Icon name="file-word" width={24} height={24} />
        Pobierz plik Word
      </button>
    </download-doc>
    <print-button>
      <button>
        <Icon name="print" width={24} height={24} />
        Drukuj
      </button>
    </print-button>
    <footer>
      <a href=`${Astro.url.origin}/moje-dokumenty`>Zobacz w moich dokumentach</a
      >
    </footer>
  </aside>
</Layout>

<style>
  article {
    @apply bg-white p-30 lg:p-50 w-[90vw] max-w-[900px];
    @apply order-2 lg:order-1;

    counter-reset: section;
  }

  article :global(h3::before) {
    counter-increment: section;
    content: "\00A7"counter(section) ". ";
  }

  aside {
    @apply order-1 lg:order-2;
    @apply flex lg:flex-col gap-15 items-start;
    @apply sticky top-[var(--navbar-height)] p-30;
    @apply print:hidden;
    @apply bg-light rounded-lg;
    @apply w-full max-w-[300px];
  }

  aside header {
    @apply flex gap-15;
  }

  aside header h3 {
    @apply flex-shrink;
  }

  aside header svg {
    @apply flex-shrink-0;
  }

  aside button {
    @apply btn btn-default btn-big;
  }

  aside a {
    @apply btn btn-alt;
  }

  aside footer {
    @apply mt-20;
  }
</style>
<script>
  import exportDoc from "../../../utils/exportDoc";

  class DownloadDoc extends HTMLElement {
    contentId: string;
    button: HTMLButtonElement;

    constructor() {
      super();

      this.contentId = String(this.getAttribute("content-id"));
      this.button = this.querySelector("button") as HTMLButtonElement;
    }

    connectedCallback() {
      this.button.addEventListener("click", () => {
        const docContent = document.querySelector(this.contentId);

        if (docContent) {
          exportDoc(
            docContent.innerHTML,
            docContent.getAttribute("data-title")
          );
        }
      });
    }
  }
  customElements.define("download-doc", DownloadDoc);

  class PrintButton extends HTMLElement {
    button: HTMLButtonElement;

    constructor() {
      super();

      this.button = this.querySelector("button") as HTMLButtonElement;
    }

    connectedCallback() {
      this.button.addEventListener("click", () => {
        window.print();
      });
    }
  }
  customElements.define("print-button", PrintButton);
</script>
