---
const { options, labels, token, selected } = Astro.props;
---

<radio-grid>
  <header class={`grid grid-cols-${options.length}`}>
    {options.map((opt) => <div>{opt}</div>)}
  </header>
  <fieldset class={`grid gap-y-10 gap-x-0 grid-cols-${options.length}`}>
    {
      labels.map((label) => (
        <>
          <label>{label}</label>
          {options.map((opt, index) => {
            return index > 0 ? (
              <div>
                <input
                  type="radio"
                  name={label}
                  value={opt}
                  aria-label={`${opt}`}
                  checked={selected[index - 1].includes(label)}
                />
              </div>
            ) : null;
          })}
        </>
      ))
    }
  </fieldset>
  {
    token.map((t, index) => (
      <input
        type="hidden"
        name={t}
        id={options[index + 1]}
        value={selected[index].toString()}
      />
    ))
  }
</radio-grid>

<style>
  radio-grid {
    @apply flex flex-col gap-10;
  }

  header {
    @apply font-bold text-sm;
  }

  header div:first-child {
    @apply px-20;
  }

  header div:not(:first-child),
  fieldset div {
    @apply text-center;
  }

  fieldset div,
  fieldset label {
    @apply bg-white px-20 py-15;
  }

  fieldset label {
    @apply font-serif text-dark90 text-xl;
  }
</style>

<script>
  import { EMPTY } from "../content/documents/_umowa-najmu";

  class Radiogrid extends HTMLElement {
    valueInputs: NodeListOf<HTMLInputElement>;
    radios: NodeListOf<HTMLInputElement>;

    constructor() {
      super();

      this.valueInputs = this.querySelectorAll('input[type="hidden"]');
      this.radios = this.querySelectorAll('input[type="radio"]');
    }

    connectedCallback() {
      for (let radio of Array.from(this.radios)) {
        radio.addEventListener("change", this.setHiddenValue.bind(this));
      }
    }

    setHiddenValue() {
      const values = this.getHiddenValue();

      Array.from(this.valueInputs).map((input) => {
        const answer = values[input.id] ? values[input.id] : EMPTY;

        input.value = Array.isArray(answer) ? answer.join(", ") : answer;
      });
    }

    getHiddenValue() {
      let values = {};

      for (let { name, value, checked } of Array.from(this.radios)) {
        if (checked) {
          if (!Array.isArray(values[value])) {
            values[value] = [];
          }

          values[value].push(name);
        }
      }

      return values;
    }
  }
  customElements.define("radio-grid", Radiogrid);
</script>
