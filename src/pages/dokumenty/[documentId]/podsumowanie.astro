---
import Layout from "../../../layouts/App.astro";
import { getEntry } from "astro:content";
import Answer from "@components/Answer.astro";
import { getDocumentSummary } from "@db/document";
import { getSession } from "auth-astro/server";
import crypt from "@utils/crypt";
import { Icon } from "astro-icon";
import ChangeNameButton from "@components/ChangeNameButton.astro";
import ChangeNameModal from "@components/ChangeNameModal.astro";
import Badge from "@components/Badge.astro";
import { handleNameChange } from "@utils/document";
import pageTitle from "@utils/pageTitle";
import Toast from "@components/Toast.astro";
import type { Answers } from "@type";
import { deleteSessionDocument, getAllAnswers } from "@db/session";
import { SESSION_COOKIE } from "@utils/cookies";
import getQuesitons from "@utils/questions";

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  await handleNameChange(formData);
}

const { documentId: dId } = Astro.params;
const documentId = String(dId);

const session = await getSession(Astro.request);
const isUserDocument = session && Number(documentId);
const ssid = session
  ? session.user?.ssid
  : Astro.cookies.get(SESSION_COOKIE).value;

if (!ssid) {
  return Astro.redirect("/404");
}

if (!Number(documentId)) {
  const refererUrl = Astro.request.headers.get("referer");

  if (!refererUrl || !refererUrl.includes(documentId)) {
    await deleteSessionDocument(ssid, documentId);
  }
}

let docId = documentId;
let draft = false;
let answers: Answers = {},
  title;

if (isUserDocument) {
  const userId = session.user?.id;

  if (!session || !userId) {
    return Astro.redirect("/");
  }

  const data = await getDocumentSummary(documentId, userId);

  if (data) {
    docId = data.doc;
    answers = data.answers;
    draft = data.draft;
    title = data.title;
  } else {
    return Astro.redirect("/404");
  }

  if (!draft) {
    return Astro.redirect(`/dokumenty/${documentId}/dokument`);
  }
}

const document = await getEntry("documents", docId);

if (!document) {
  return Astro.redirect("/404");
}

const {
  data: { index, encrypted, title: docTitle, dates },
} = document;

if (!index) {
  return Astro.redirect("/404");
}

const { questionEntries: questions } = await getQuesitons(index);

if (!Object.keys(answers).length) {
  const qData: Answers = {};
  for (let { data } of questions) {
    const { question, info, ...fields } = data;
    Object.assign(qData, { ...fields });
  }

  try {
    const sessionAnswers = await getAllAnswers(ssid, documentId);

    if (sessionAnswers) {
      answers = sessionAnswers;
    }
  } catch {}

  if (Object.keys(answers).length !== Object.keys(qData).length) {
    for (let field of Object.keys(qData)) {
      if (!(field in answers)) {
        if (dates && dates.includes(field)) {
          answers[field] = new Date();
        } else {
          answers[field] = qData[field];
        }
      }
    }
  }
} else if (encrypted) {
  encrypted.forEach((key) => {
    try {
      answers[key] = crypt.decrypt(answers[key]);
    } catch {}
  });
}

if (!title) title = docTitle;
---

<Layout title={pageTitle(`Podsumowanie - ${title}`)}>
  <span slot="topbar-title"
    ><span>{title}</span>{draft && <Badge>Szkic</Badge>}</span
  >
  {
    draft && (
      <ChangeNameButton
        id={documentId}
        title={title}
        slot="topbar-after-title"
      />
    )
  }
  <section>
    <h1>Podsumowanie</h1>
    {
      index.map(({ title, questions }) => (
        <>
          <h5>{title}</h5>
          {questions.map(({ title, token, answer, type, id: { slug } }) => (
            <div>
              <div>
                <h6>{title}</h6>
                <Answer
                  data={answers}
                  template={answer}
                  token={token}
                  type={type}
                />
              </div>
              <a href={`${Astro.url.origin}/dokumenty/${documentId}/${slug}`}>
                Zmie≈Ñ
              </a>
            </div>
          ))}
        </>
      ))
    }
    <footer>
      <save-form>
        <form method="POST" action={`${Astro.url.origin}/dokument`}>
          <input type="hidden" name="id" value={documentId} />
          {
            !isUserDocument && (
              <input type="hidden" name="draft" value="false" />
            )
          }
          <button type="submit">Generuj dokument</button>
          {
            !isUserDocument && (
              <button>
                <Icon name="save" width={18} height={18} />
                Zapisz szkic
              </button>
            )
          }
        </form>
      </save-form>
    </footer>
  </section>
  <ChangeNameModal />
  <Toast />
</Layout>
<style>
  section {
    @apply max-w-[1000px] mx-auto w-full mt-20;
  }

  section h1 {
    @apply text-2xl;
  }

  section h5 {
    @apply mt-30 mb-10 font-sans font-bold text-sm tracking-normal text-dark55;
  }

  section > div {
    @apply bg-white my-10 py-15 px-20 rounded-lg;
    @apply flex items-start sm:items-center gap-10;
    @apply flex-col sm:flex-row;
  }

  section > div > div {
    @apply flex-grow;
  }

  section a {
    @apply btn btn-alt;
  }

  footer {
    @apply p-50;
  }

  button {
    @apply btn btn-alt;
  }

  footer a,
  button[type="submit"] {
    @apply btn btn-default btn-big;
  }

  save-form form {
    @apply flex flex-col justify-center gap-20 items-center;
  }
</style>

<script>
  class SaveForm extends HTMLElement {
    draftInput: HTMLInputElement | null;
    button: HTMLButtonElement | null;

    constructor() {
      super();

      this.draftInput = this.querySelector('input[name="draft"]');
      this.button = this.querySelector('button:not([type="submit"])');
    }

    connectedCallback() {
      if (this.button) {
        this.button.addEventListener("click", () => {
          if (this.draftInput) {
            this.draftInput.value = String(true);
          }
        });
      }
    }
  }
  customElements.define("save-form", SaveForm);
</script>
