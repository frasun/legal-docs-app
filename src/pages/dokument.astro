---
import { getSession } from "auth-astro/server";
import { createDocument, publishDraft } from "@db/document";
import { getEntry } from "astro:content";
//@ts-ignore
import { DRAFT_SAVED_PARAM } from "@utils/toasts";
import type { Answers } from "@type";
import {
  deletePaymentSession,
  deleteSessionDocument,
  getAllAnswers,
  getPaymentSession,
} from "@db/session";
import getQuesitons from "@utils/questions";
import * as PARAMS from "@utils/urlParams";
import { UUID } from "mongodb";

const urlParams = new URL(Astro.request.url).searchParams;
const draftParam = String(urlParams.get(PARAMS.DRAFT)) === "true";
const session = await getSession(Astro.request);

let documentId;

if (draftParam) {
  const documentIdParam = urlParams.get(PARAMS.DOCUMENT);
  const paymentId = urlParams.get(PARAMS.PAYMENT);
  let ssid, userId;

  if (documentIdParam) {
    documentId = documentIdParam;

    if (!session) {
      return Astro.redirect(
        `/zaloguj-sie?${PARAMS.REDIRECT}=dokument&${PARAMS.DOCUMENT}=${documentId}&${PARAMS.DRAFT}=true`
      );
    }

    ssid = session.user?.ssid as string;
    userId = session.user?.id as string;
  } else if (paymentId) {
    const paymentSession = await getPaymentSession(paymentId);

    if (!paymentSession) {
      console.log("missing payment Session");
      return Astro.redirect("/404");
    }

    documentId = paymentSession.documentId as string;
    ssid = paymentSession.ssid as string;

    if (!session) {
      console.log("anonymous draft param error");
      return Astro.redirect("/404");
    }

    userId = session.user?.id as string;
  }

  if (!documentId) {
    console.log("missing documentId");
    return Astro.redirect("/404");
  }

  if (!ssid) {
    console.log("missing ssid");
    return Astro.redirect("/404");
  }

  if (!userId) {
    console.log("missing userId");
    return Astro.redirect("/404");
  }

  const document = await createDoc(documentId, userId, ssid, true);

  if (document) {
    const redirectUrl = new URL(`${Astro.url.origin}/moje-dokumenty`);

    redirectUrl.searchParams.append(DRAFT_SAVED_PARAM, "true");

    return Astro.redirect(redirectUrl);
  } else {
    return Astro.redirect("/404");
  }
} else {
  const paymentId = urlParams.get(PARAMS.PAYMENT);

  if (!paymentId) {
    console.log("missing paymentId");
    return Astro.redirect("/404");
  }

  const emailParam = urlParams.get(PARAMS.EMAIL);
  const userId = session
    ? session.user?.id
    : emailParam
    ? decodeURIComponent(emailParam)
    : undefined;

  const paymentSession = await getPaymentSession(paymentId);

  if (!paymentSession) {
    console.log("missing payment Session");
    return Astro.redirect("/404");
  }

  const ssid = paymentSession.ssid as string;
  documentId = paymentSession.documentId as string;

  if (!ssid) {
    console.log("missing ssid");
    return Astro.redirect("/404");
  }

  if (!documentId) {
    console.log("missing documentId");
    return Astro.redirect("/404");
  }

  if (!userId) {
    console.log("missing userId");
    return Astro.redirect("/404");
  }

  if (UUID.isValid(documentId)) {
    try {
      await publishDraft(documentId);
      await deletePaymentSession(paymentId);

      return Astro.redirect(`/dokumenty/${documentId}/dokument?success=true`);
    } catch {
      console.log("publish draft error");
      return Astro.redirect("/404");
    }
  } else {
    try {
      const document = await createDoc(documentId, userId, ssid, false);

      if (document) {
        try {
          await deletePaymentSession(paymentId);
        } catch {}

        if (session) {
          return Astro.redirect(
            `${Astro.url.origin}/dokumenty/${document}/dokument?success=true`
          );
        } else {
          return Astro.redirect(
            `${Astro.url.origin}/dokumenty/${document}/dokument?${
              PARAMS.EMAIL
            }=${encodeURIComponent(userId)}&success=true`
          );
        }
      }
    } catch (e) {
      console.log(e);
    }
  }
}

async function createDoc(
  documentId: string,
  userId: string,
  ssid: string,
  draft: boolean
) {
  try {
    const answers = await prepareAnswers(documentId, ssid);
    const document = await createDocument(documentId, answers, userId, draft);

    if (document) {
      try {
        await deleteSessionDocument(ssid, documentId);
      } catch {}

      return document;
    }
  } catch (e) {
    console.log(e);
  }
}

async function prepareAnswers(documentId: string, ssid: string) {
  const template = await getEntry("documents", documentId);

  if (!template) {
    console.log("missing template");
    return Astro.redirect("/404");
  }

  const {
    data: { index, dates },
  } = template;

  if (!index) {
    console.log("missing index");
    return Astro.redirect("/404");
  }

  const { questionEntries: questions } = await getQuesitons(index);

  const qData: Answers = {};
  for (let { data } of questions) {
    const { question, info, userId, ...fields } = data;
    Object.assign(qData, { ...fields });
  }

  let answers: Answers = {};

  try {
    const sessionAnswers = await getAllAnswers(ssid, documentId);

    if (sessionAnswers) {
      answers = sessionAnswers;
    }
  } catch {
    console.log("missing documentId");
    return Astro.redirect("/404");
  }

  if (Object.keys(answers).length !== Object.keys(qData).length) {
    for (let field of Object.keys(qData)) {
      if (!answers[field]) {
        if (dates && dates.includes(field)) {
          answers[field] = String(new Date());
        } else {
          answers[field] = qData[field];
        }
      }
    }
  }

  return answers;
}
---
