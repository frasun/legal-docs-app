---
import Layout from "../../layouts/App.astro";
import pageTitle from "@utils/pageTitle";
import DataInput from "@components/DataInput.astro";
import { entityEnum } from "@utils/constants";
import ErrorList from "@components/ErrorList.astro";
import { IDENTITY_UPDATED, ERROR, ToastStatus } from "@utils/toasts";
import Toast from "@components/Toast.astro";
import routes from "@utils/routes";
import { REDIRECT } from "@utils/urlParams";
import { getIdentity, updateIdentity } from "@api/identities";
import { Identity } from "@type";

const { identityId: iId } = Astro.params;
const identityId = String(iId);

const PAGE_TITLE = "Edytuj tożsamość";
let errors: string[] = [],
  type: Identity["type"],
  name: Identity["name"],
  pin: Identity["pin"],
  street: Identity["street"],
  apt: Identity["apt"],
  postalCode: Identity["postalCode"],
  city: Identity["city"],
  personName = "",
  personStreet = "",
  personApt: Identity["apt"] = "",
  personPostalCode = "",
  personCity = "",
  personPin = "",
  companyName = "",
  companyStreet = "",
  companyApt: Identity["apt"] = "",
  companyPostalCode = "",
  companyCity = "",
  companyPin = "",
  toast: string | null = null,
  toastStatus: ToastStatus = ToastStatus.default;

try {
  const response = await getIdentity(
    `${Astro.request.headers.get("cookie")}`,
    identityId
  );

  ({ type, name, pin, street, apt, postalCode, city } = response);
} catch {
  return Astro.redirect(routes.NOT_FOUND);
}

switch (type) {
  case entityEnum[0]:
    personName = name;
    personPin = pin;
    personStreet = street;
    personApt = apt;
    personPostalCode = postalCode;
    personCity = city;
    break;
  case entityEnum[1]:
    companyName = name;
    companyPin = pin;
    companyStreet = street;
    companyApt = apt;
    companyPostalCode = postalCode;
    companyCity = city;
    break;
  default:
    return Astro.redirect(routes.NOT_FOUND);
}

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const type = formData.get("Type");

  switch (type) {
    case entityEnum[0]:
      name = String(formData.get("PersonName") || "");
      pin = String(formData.get("PersonPin") || "");
      street = String(formData.get("PersonStreet") || "");
      apt = String(formData.get("PersonApt") || "");
      postalCode = String(formData.get("PersonPostalCode") || "");
      city = String(formData.get("PersonCity") || "");
      break;
    case entityEnum[1]:
      name = String(formData.get("CompanyName") || "");
      pin = String(formData.get("CompanyPin") || "");
      street = String(formData.get("CompanyStreet") || "");
      apt = String(formData.get("CompanyApt") || "");
      postalCode = String(formData.get("CompanyPostalCode") || "");
      city = String(formData.get("CompanyCity") || "");
      break;
    default:
      return Astro.redirect(routes.NOT_FOUND);
  }

  const identity = {
    type,
    name,
    pin,
    street,
    apt,
    postalCode,
    city,
  };

  try {
    await updateIdentity(
      `${Astro.request.headers.get("cookie")}`,
      identityId,
      identity
    );
    toast = IDENTITY_UPDATED;
  } catch (e) {
    if (e instanceof Error) {
      if (e.cause === 400) {
        e.message.split(",").map((message: string) => errors.push(message));
      } else {
        toast = ERROR;
        toastStatus = ToastStatus.error;
      }
    }
  } finally {
    switch (type) {
      case entityEnum[0]:
        personName = name;
        personPin = pin;
        personStreet = street;
        personApt = apt;
        personPostalCode = postalCode;
        personCity = city;
        break;
      case entityEnum[1]:
        companyName = name;
        companyPin = pin;
        companyStreet = street;
        companyApt = apt;
        companyPostalCode = postalCode;
        companyCity = city;
        break;
      default:
        return Astro.redirect(routes.NOT_FOUND);
    }
  }
}
---

<Layout title={pageTitle(PAGE_TITLE)}>
  <span slot="topbar-title">{PAGE_TITLE}</span>
  <form method="POST">
    <header>
      <h3>Wypełnij formularz z danymi</h3>
      {
        errors.length ? (
          <ErrorList>
            {errors.map((message) => (
              <p>{message}</p>
            ))}
          </ErrorList>
        ) : (
          ``
        )
      }
    </header>
    <DataInput
      type={type}
      personName={personName}
      personStreet={personStreet}
      personApt={personApt}
      personPostalCode={personPostalCode}
      personCity={personCity}
      personPin={personPin}
      companyName={companyName}
      companyStreet={companyStreet}
      companyApt={companyApt}
      companyPostalCode={companyPostalCode}
      companyCity={companyCity}
      companyPin={companyPin}
    />
    <footer>
      <a href={`${Astro.url.origin}/tozsamosci`}>Anuluj</a>
      <button type="submit">Zapisz</button>
    </footer>
  </form>
  {toast && <Toast info={toast} status={toastStatus} />}
</Layout>

<style>
  form {
    @apply w-full max-w-[780px] mx-auto;
    @apply flex flex-col justify-center min-h-full;
    @apply py-[var(--navbar-height)];
  }

  form header {
    @apply flex flex-col gap-15 mb-15;
  }

  form :global(fieldset) {
    @apply flex flex-col gap-20;
  }

  form footer {
    @apply flex justify-between items-center;
    @apply my-30;
  }

  form footer button[type="submit"],
  form footer a {
    @apply btn btn-big;
  }

  form footer a {
    @apply btn-alt;
  }

  form footer button[type="submit"] {
    @apply btn-default;
  }
</style>
