---
import { Icon } from "astro-icon";
import { getCollection, getEntry } from "astro:content";
import Layout from "../../../layouts/App.astro";
import QuestionIndex from "../../../components/QuestionIndex.astro";
import { getDocument, updateAnswers } from "../../../../db/document";
import { getSession } from "../../../auth-astro/server";

const { documentId: dId, questionId } = Astro.params;
const documentId = String(dId);
const session = await getSession(Astro.request);

let answers, data, title;
let docId = documentId;
let draft = false;

if (Number(documentId)) {
  if (!session) {
    return Astro.redirect("/");
  }

  data = await getDocument(documentId);

  if (data) {
    docId = data.doc;
    answers = data.answers;
    title = data.title;
    draft = data.draft;
  } else {
    return Astro.redirect("/404");
  }
} else if (Astro.cookies.has(documentId)) {
  answers = Astro.cookies.get(documentId).json();
}

const document = await getEntry("documents", docId);

if (document) {
  if (!answers) {
    answers = document.data.seed;
  }
} else {
  return Astro.redirect("/404");
}

const {
  data: { index: qIndex },
} = document;

if (!title) title = document.data.title;

const qIndexCopy = JSON.parse(JSON.stringify(qIndex));
const qs = JSON.parse(
  JSON.stringify(
    qIndexCopy.reduce(({ questions: qs }, { questions }) =>
      qs.concat(questions)
    )
  )
);

const questions = await getCollection("questions", ({ slug }) =>
  qs.find(({ id: { slug: qSlug } }) => slug === qSlug)
);

const q = questions.find(({ slug }) => slug === questionId);
if (!q) {
  return Astro.redirect("/404");
}

const {
  data: { question: questionContent },
} = q;

const { remarkPluginFrontmatter: qData, Content } = await q.render();

for (let key of Object.keys(qData)) {
  if (key !== "question" && answers[key]) qData[key] = answers[key];
}

const currentQuestionIndex = qs.findIndex(
  ({ id: { slug } }) => slug === questionId
);
const { title: qTitle } = qs[currentQuestionIndex];
const nextUrl = `${Astro.url.origin}/dokumenty/${documentId}/${
  currentQuestionIndex < qs.length - 1
    ? `${qs[currentQuestionIndex + 1].id.slug}`
    : `podsumowanie`
}`;
const prevUrl =
  currentQuestionIndex > 0
    ? `${Astro.url.origin}/dokumenty/${documentId}/${
        qs[currentQuestionIndex - 1].id.slug
      }`
    : null;

if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData();

    let newAnswers = {};
    for (let [key, value] of formData) {
      if (key in answers) {
        newAnswers[key] = value;
      }
    }

    const allAnswers = { ...answers, ...newAnswers };

    if (Number(documentId)) {
      if (Object.keys(newAnswers).length) {
        await updateAnswers(documentId, allAnswers);
      }
    } else {
      Astro.cookies.set(documentId, allAnswers, {
        maxAge: 600,
        httpOnly: true,
      });
    }

    return Astro.redirect(nextUrl);
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
    return Astro.redirect("/404");
  }
}
---

<Layout title={`${qTitle} - ${title}`}>
  <span slot="topbar-title">{title}{draft && <span> - Szkic</span>}</span>
  <aside slot="topbar-aside">
    <span>
      {currentQuestionIndex + 1} / {questions.length}
    </span>
    {
      Astro.cookies.has(documentId) ? (
        <form method="POST" action={`${Astro.url.origin}/dokument`}>
          {Object.entries(Astro.cookies.get(docId).json()).map(
            ([key, value]) => (
              <input type="hidden" name={key} value={String(value)} />
            )
          )}
          <input type="hidden" name="id" value={docId} />
          <input type="hidden" name="draft" value="true" />
          <button>
            <Icon name="save" width={16} height={16} />
            Zapisz
          </button>
        </form>
      ) : null
    }
  </aside>
  <form method="POST">
    <h3>{questionContent}</h3>
    <Content />
    <footer>
      <div>
        <span>§{currentQuestionIndex + 1}</span>
        <span>{qTitle}</span>
      </div>
      <nav>
        {prevUrl && <a href={prevUrl}>Poprzednie</a>}
        <button type="submit"
          >{
            currentQuestionIndex >= questions.length - 1
              ? "Podsumowanie"
              : "Następne"
          }</button
        >
      </nav>
    </footer>
  </form>

  <aside>
    <QuestionIndex
      index={qIndex}
      current={questionId}
      documentId={documentId}
    />
  </aside>
</Layout>

<style>
  form {
    @apply container;
  }

  footer {
    @apply flex flex-wrap gap-10;
    @apply justify-between;
    @apply my-30;
  }

  footer nav {
    @apply flex flex-wrap gap-15;
  }

  footer a {
    @apply btn btn-alt;
  }

  footer button[type="submit"] {
    @apply btn btn-default;
    @apply self-end;
  }

  aside button {
    @apply btn btn-alt;
  }

  aside form {
    @apply p-0;
  }
</style>
