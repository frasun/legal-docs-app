---
import { Icon } from "astro-icon";

export enum ToastStatus {
  default = "default",
  error = "error",
}

interface Props {
  info: string;
  status?: ToastStatus;
}

const { info, status = ToastStatus.default } = Astro.props;
---

<toast-element data-status={status}>
  {
    status === ToastStatus.error ? (
      <Icon name="clear" width={32} height={32} />
    ) : (
      <Icon name="tick" width={32} height={32} />
    )
  }
  {info}
</toast-element>

<style>
  toast-element {
    @apply py-15 px-20 bg-dark90 text-light rounded z-max;
    @apply fixed top-15 right-15;
    @apply opacity-0 translate-x-[calc(100%_+_15px)];
    @apply w-[260px];
    @apply leading-tight;
    @apply flex gap-15;

    animation-name: showToast;
    animation-duration: 5s;
    animation-timing-function: linear;
    animation-delay: 0.2s;
    animation-iteration-count: 1;
  }

  toast-element svg {
    @apply text-light;
  }

  toast-element[data-status="error"] {
    @apply bg-orange;
  }

  @keyframes showToast {
    0% {
      @apply translate-x-0;
    }

    5% {
      @apply opacity-100;
      @apply translate-x-0;
    }

    90% {
      @apply opacity-100;
      @apply translate-x-0;
    }

    95% {
      @apply opacity-0;
      @apply translate-x-0;
    }

    100% {
      @apply translate-x-[calc(100%_+_15px)];
      @apply opacity-0;
    }
  }
</style>

<script>
  class ToastElement extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      this.addEventListener("animationend", () => this.remove());
    }
  }
  customElements.define("toast-element", ToastElement);
</script>
