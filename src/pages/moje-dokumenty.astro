---
import { Icon } from "astro-icon";
import { TIMEZONE as timeZone, LOCALE } from "../utils/date";
import { SignOut } from "../auth-astro/components";
import Layout from "../layouts/App.astro";
import { getSession } from "../auth-astro/server";
import { getDocuments, createDocument } from "../../db/document";
import { getUserByEmail } from "../../db/auth";
import Badge from "../components/Badge.astro";
import EmptyScreen from "../components/EmptyScreen.astro";
import ChangeNameButton from "../components/ChangeNameButton.astro";
import ChangeNameModal from "../components/ChangeNameModal.astro";
import { handleNameChange } from "../utils/document";

const session = await getSession(Astro.request);

if (!session) {
  return Astro.redirect("/zaloguj-sie");
}

const user = await getUserByEmail(String(session.user?.email));
const userId = user ? user.id : null;

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const docId = formData.get("template");
  const localAnswers = formData.get("answers");

  await handleNameChange(formData);

  if (localAnswers) {
    const answers = JSON.parse(String(localAnswers));
    await createDocument(docId, JSON.parse(Object(answers)), userId, true);
  }
}

const documents = await getDocuments(userId);

function formatDate(datetime) {
  const date = datetime.toLocaleDateString(LOCALE, {
    timeZone,
    day: "numeric",
    month: "long",
  });

  const time = datetime.toLocaleTimeString(LOCALE, {
    timeZone,
    hour: "numeric",
    minute: "numeric",
  });

  return `${date}, ${time}`;
}

// Group items by month
const groupedItems = {};

documents.forEach((item) => {
  const date = item.modified || item.created; // Use modified date if available, otherwise created date
  const monthYear = date.toLocaleString(LOCALE, {
    month: "long",
    year: "numeric",
  });

  if (!groupedItems[monthYear]) {
    groupedItems[monthYear] = [];
  }

  groupedItems[monthYear].push(item);
});
---

<Layout title="Moje dokumenty - Prawniczek">
  <span slot="topbar-title">Moje dokumenty</span>
  <div slot="topbar-aside">
    {session.user?.email}
    <SignOut params={{ callbackUrl: Astro.url.origin }}>Wyloguj się</SignOut>
  </div>
  {
    documents.length ? (
      <section>
        {Object.keys(groupedItems).map((monthYear) => (
          <>
            <h6>{monthYear}</h6>
            {groupedItems[monthYear].map(
              ({ doc, id, title, doctitle, created, draft, modified }) => (
                <div>
                  <header>
                    <a
                      href={`${Astro.url.origin}/dokumenty/${id}/${
                        draft ? `podsumowanie` : `dokument`
                      }`}
                    >
                      {title}
                      {draft && <Badge>Szkic</Badge>}
                    </a>
                    <a href={`${Astro.url.origin}/dokumenty/${doc}`}>
                      <Icon name="document" width={16} height={16} />
                      {doctitle}
                    </a>
                  </header>
                  {draft ? (
                    <dl>
                      <dt>{modified ? `Ostatnia zmiana:` : `Utworzony`}</dt>
                      <dd>
                        {modified ? formatDate(modified) : formatDate(created)}
                      </dd>
                    </dl>
                  ) : (
                    <span>
                      {modified ? formatDate(modified) : formatDate(created)}
                    </span>
                  )}
                  <aside>
                    <ChangeNameButton
                      id={id}
                      title={title}
                      label="Zmień nazwę"
                    />
                  </aside>
                </div>
              )
            )}
          </>
        ))}
      </section>
    ) : (
      <EmptyScreen
        icon="document"
        text="Nie masz jeszcze dokumentów"
        cta="Stwórz pierwszy dokument"
        ctaUrl={`${Astro.url.origin}/dokumenty`}
      />
    )
  }
  <ChangeNameModal />
</Layout>

<style>
  section {
    @apply flex gap-20 flex-wrap w-full max-w-[1024px] mx-auto py-20;
  }

  section > div {
    @apply px-20 py-15 bg-white rounded-lg w-full;
    @apply grid grid-cols-4 gap-15 items-start;
  }

  section > div > header {
    @apply col-span-2;
    @apply flex flex-col gap-[5px];
  }

  section > div > header a {
    @apply text-sm;
    @apply flex gap-[5px] items-center;
    @apply text-dark55;
  }

  section > div > header a:first-child:not(:hover) {
    @apply text-dark90;
  }

  section > div > header a:first-child {
    @apply text-xl;
  }

  section > div > dl dt {
    @apply text-xs text-dark40;
  }

  section > div > dl dt:not(:first-child) {
    @apply pt-10;
  }

  section > div > aside {
    @apply flex gap-15 items-center justify-end;
  }

  section > div > aside a {
    @apply btn btn-alt;
  }

  section small {
    @apply block;
  }

  h6 {
    @apply font-bold text-xs;
  }
</style>
