---
import Layout from "../layouts/App.astro";
import { Icon } from "astro-icon";
import { formatDateTime, LOCALE } from "@utils/date";
import { getEntry } from "astro:content";
import { getSession } from "auth-astro/server";
import { getDocuments } from "@db/document";
import Badge, { BadgeStyle } from "@components/Badge.astro";
import EmptyScreen from "@components/EmptyScreen.astro";
import ChangeNameButton from "@components/ChangeNameButton.astro";
import ChangeNameModal from "@components/ChangeNameModal.astro";
import { handleNameChange } from "@utils/document";
import pageTitle from "@utils/pageTitle";
import Toast, { ToastStatus } from "@components/Toast.astro";
import {
  DOCUMENT_NAME_CHANGED,
  DRAFT_SAVED,
  DRAFT_SAVED_PARAM,
  DOCUMENT_NAME_PARAM,
  DRAFT_REMOVED,
  DRAFT_REMOVED_PARAM,
  ERROR,
  COPY_DOCUMENT_PARAM,
  COPY_DOCUMENT,
} from "@utils/toasts";
import * as PARAMS from "@utils/urlParams";
import DeleteDraftButton from "@components/DeleteDraftButton.astro";
import CopyDocumentButton from "@components/CopyDocumentButton.astro";
import Pagination from "@components/Pagination.astro";
import routes from "@utils/routes";

const session = await getSession(Astro.request);

if (!session) {
  return Astro.redirect(
    `${routes.SIGN_IN}?${PARAMS.REDIRECT}=${Astro.url.pathname}`
  );
}

const userId = session.user?.id;

if (!userId) {
  return Astro.redirect(
    `${routes.SIGN_IN}?${PARAMS.REDIRECT}=${Astro.url.pathname}`
  );
}

let toast: string | null = null,
  toastStatus;
const urlParams = new URL(Astro.request.url).searchParams;

if (urlParams.has(DRAFT_SAVED_PARAM)) {
  toast = DRAFT_SAVED;
}

if (urlParams.has(DOCUMENT_NAME_PARAM)) {
  toast = DOCUMENT_NAME_CHANGED;
}

if (urlParams.has(DRAFT_REMOVED_PARAM)) {
  if (Boolean(Number(urlParams.get(DRAFT_REMOVED_PARAM)))) {
    toast = DRAFT_REMOVED;
  } else {
    toast = ERROR;
    toastStatus = ToastStatus.error;
  }
}

if (urlParams.has(COPY_DOCUMENT_PARAM)) {
  if (Boolean(Number(urlParams.get(COPY_DOCUMENT_PARAM)))) {
    toast = COPY_DOCUMENT;
  } else {
    toast = ERROR;
    toastStatus = ToastStatus.error;
  }
}

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();

  try {
    await handleNameChange(formData);

    const redirectUrl = new URL(Astro.request.url);

    if (!redirectUrl.searchParams.has(DOCUMENT_NAME_PARAM)) {
      redirectUrl.searchParams.append(DOCUMENT_NAME_PARAM, "true");
    }

    return Astro.redirect(redirectUrl);
  } catch {}
}

const page =
  Number(new URL(Astro.request.url).searchParams.get(PARAMS.PAGE)) || undefined;
const { documents, pages, currentPage } = await getDocuments(userId, page);
const groupedItems: Record<string, typeof documents> = {};

documents.forEach((item) => {
  const date = item.modified || item.created;

  if (date) {
    const monthYear = date.toLocaleString(LOCALE, {
      month: "long",
      year: "numeric",
    });

    if (!groupedItems[monthYear]) {
      groupedItems[monthYear] = [];
    }

    groupedItems[monthYear].push(item);
  }
});

const PAGE_TITLE = "Moje dokumenty";

async function getDocTitle(docId: string) {
  const docEntry = await getEntry("documents", docId);
  let docTitle = "";

  if (docEntry) {
    const {
      data: { title },
    } = docEntry;
    docTitle = title;
  }

  return docTitle;
}

function getDateLabel(created: Date, modified: Date) {
  return modified > created ? "Ostatnia zmiana" : "Utworzony";
}
---

<Layout title={pageTitle(PAGE_TITLE)}>
  <span slot="topbar-title">{PAGE_TITLE}</span>
  {
    documents.length ? (
      <>
        <section>
          {Object.keys(groupedItems).map((monthYear) => (
            <>
              <h6>{monthYear}</h6>
              {groupedItems[monthYear].map(
                ({ doc, _id, title, created, draft, modified, shared }) => (
                  <div>
                    <header>
                      <a
                        href={`${Astro.url.origin}/dokumenty/${_id}/${
                          draft ? `podsumowanie` : `dokument`
                        }`}
                      >
                        <span>{title}</span>
                        {draft && <Badge>Szkic</Badge>}
                        {shared && (
                          <Badge style={BadgeStyle.purple}>Wysłany</Badge>
                        )}
                      </a>
                      <a href={`${Astro.url.origin}/dokumenty/${doc}`}>
                        <Icon name="document" width={16} height={16} />
                        {getDocTitle(String(doc))}
                      </a>
                    </header>
                    {draft ? (
                      <dl>
                        <dt>{getDateLabel(created, modified)}</dt>
                        <dd>
                          <time>{formatDateTime(modified)}</time>
                        </dd>
                      </dl>
                    ) : (
                      <time>{formatDateTime(modified)}</time>
                    )}
                    <aside>
                      {draft && <DeleteDraftButton id={_id} />}
                      <ChangeNameButton
                        id={_id}
                        title={title}
                        label="Zmień nazwę"
                      />
                      <CopyDocumentButton id={_id} />
                    </aside>
                  </div>
                )
              )}
            </>
          ))}
          <Pagination
            pages={pages}
            currentPage={currentPage}
            url={`${Astro.url.origin}/moje-dokumenty`}
          />
        </section>
      </>
    ) : (
      <EmptyScreen
        icon="document"
        cta="Stwórz pierwszy dokument"
        ctaUrl={`${Astro.url.origin}/dokumenty`}
      >
        Nie masz jeszcze dokumentów
      </EmptyScreen>
    )
  }
  <ChangeNameModal />
  {toast && <Toast info={toast} status={toastStatus} />}
</Layout>

<style>
  section {
    @apply flex gap-20 flex-wrap w-full max-w-[1024px] mx-auto py-20;
  }

  section > div {
    @apply px-20 py-15 bg-white rounded-lg w-full;
    @apply grid grid-cols-2 sm:grid-cols-4 gap-15 items-center sm:items-start;
  }

  section > div > header {
    @apply col-span-2;
    @apply flex flex-col gap-[5px];
  }

  section > div > header a {
    @apply text-sm;
    @apply flex gap-[5px] items-center;
    @apply text-dark55;
  }

  section > div > header a:not(:hover) span {
    @apply text-dark90;
  }

  section > div > header a span {
    @apply text-xl line-clamp-3;
  }

  section > div > dl dt {
    @apply text-xs text-dark40;
  }

  section > div > dl dt:not(:first-child) {
    @apply pt-10;
  }

  section > div > aside {
    @apply flex gap-15 items-center justify-end self-center;
  }

  section > div > aside a {
    @apply btn btn-alt;
  }

  section small {
    @apply block;
  }

  h6 {
    @apply font-bold text-xs;
  }

  section > div :global(change-name span) {
    @apply hidden md:inline-block;
  }
</style>
