---
import { getSession } from "auth-astro/server";
import { createDocument, publishDraft } from "@db/document";
import cryptr from "@utils/crypt";
import { getEntry } from "astro:content";
//@ts-ignore
import { DRAFT_SAVED_PARAM } from "@utils/toasts";
import type { Answers } from "@type";
import { deleteSessionDocument, getAllAnswers } from "@db/session";
import { SESSION_COOKIE } from "@utils/cookies";
import getQuesitons from "@utils/questions";

const session = await getSession(Astro.request);
const userId = session ? session.user?.id : null;
const ssid = session
  ? session.user?.ssid
  : Astro.cookies.get(SESSION_COOKIE).value;

if (!ssid) {
  console.log("missing ssid");
  return Astro.redirect("/404");
}

let documentId, draft;

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  documentId = formData.get("id") as string;
  draft = String(formData.get("draft")) === "true";
} else {
  const urlParams = new URL(Astro.request.url).searchParams;
  documentId = urlParams.get("doc");
  draft = String(urlParams.get("draft")) === "true";
}

if (!documentId) {
  console.log("missing documentId");
  return Astro.redirect("/404");
}

if (!userId) {
  return Astro.redirect(
    `/zaloguj-sie?redirect=dokument&doc=${documentId}&draft=${draft}`
  );
}

if (Number(documentId)) {
  try {
    await publishDraft(documentId);

    return Astro.redirect(`/dokumenty/${documentId}/dokument?success=true`);
  } catch {
    console.log("publish draft error");
    return Astro.redirect("/404");
  }
} else {
  const template = await getEntry("documents", documentId);

  if (!template) {
    console.log("missing template");
    return Astro.redirect("/404");
  }

  const {
    data: { index, encrypted, dates },
  } = template;

  if (!index) {
    console.log("missing index");
    return Astro.redirect("/404");
  }

  const { questionEntries: questions } = await getQuesitons(index);

  const qData: Answers = {};
  for (let { data } of questions) {
    const { question, info, ...fields } = data;
    Object.assign(qData, { ...fields });
  }

  let answers: Answers = {};

  try {
    const sessionAnswers = await getAllAnswers(ssid, documentId);

    if (sessionAnswers) {
      answers = sessionAnswers;
    }
  } catch {
    console.log("missing documentId");
    return Astro.redirect("/404");
  }

  if (Object.keys(answers).length !== Object.keys(qData).length) {
    for (let field of Object.keys(qData)) {
      if (!answers[field]) {
        if (dates && dates.includes(field)) {
          answers[field] = String(new Date());
        } else {
          answers[field] = qData[field];
        }
      }
    }
  }

  if (encrypted) {
    for (let field of encrypted) {
      try {
        answers[field] = cryptr.encrypt(answers[field]);
      } catch {}
    }
  }

  try {
    const docId = await createDoc(documentId, answers, draft, userId);

    if (docId) {
      try {
        await deleteSessionDocument(ssid, documentId);
      } catch {}

      return Astro.redirect(
        `${Astro.url.origin}/${
          draft
            ? `moje-dokumenty?${DRAFT_SAVED_PARAM}`
            : `dokumenty/${docId}/dokument?success=true`
        }`
      );
    } else {
      console.log("create doc error");
      return Astro.redirect("/404");
    }
  } catch (e) {
    console.log(e);
    console.log("catch create doc error");
    return Astro.redirect("/404");
  }
}

async function createDoc(
  id: string,
  answers: Answers,
  draft: boolean,
  userId: string
) {
  const document = await createDocument(id, answers, userId, draft);
  const docId = document ? document.id : null;

  return docId;
}
---
