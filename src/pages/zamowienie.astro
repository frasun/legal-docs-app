---
import Stripe from "stripe";
import { nanoid } from "nanoid";
import { Icon } from "astro-icon";
import Layout from "../layouts/Layout.astro";
import pageTitle from "@utils/pageTitle";
import { getEntry } from "astro:content";
import { getSession } from "auth-astro/server";
import { SESSION_COOKIE } from "@utils/cookies";
import { createPaymentSession } from "@db/session";
import * as PARAMS from "@utils/urlParams";
import { getDocumentId } from "@db/document";
import { emailRegExp, testString } from "@utils/dataValidation";
import { UUID } from "mongodb";
import routes from "@utils/routes";

const SUMMARY = "podsumowanie";
const refererUrl = Astro.request.headers.get("referer");
const urlParams = new URL(Astro.request.url).searchParams;
const session = await getSession(Astro.request);

let documentId: string | null,
  documentName: string | undefined,
  anonymousEmail: string | undefined;

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  anonymousEmail = String(formData.get("email"));

  if (!anonymousEmail || !testString(anonymousEmail, emailRegExp)) {
    return Astro.redirect(routes.NOT_FOUND);
  }
}

if (!refererUrl) {
  return Astro.redirect(routes.NOT_FOUND);
}

documentId = urlParams.get(PARAMS.DOCUMENT);

if (!documentId) {
  const urlSegments = refererUrl.split("/");
  if (urlSegments[urlSegments.length - 1] !== SUMMARY) {
    return Astro.redirect(routes.NOT_FOUND);
  }

  documentName = urlSegments[urlSegments.length - 2];

  if (UUID.isValid(documentName) && session) {
    ({ doc: documentId } = await getDocumentId(
      documentName,
      session.user?.id as string
    ));
  } else {
    documentId = urlSegments[urlSegments.length - 2];
  }
}

if (!documentId) {
  console.log("no document name or document id");
  return Astro.redirect(routes.NOT_FOUND);
}

const document = await getEntry("documents", documentId);

if (!document) {
  console.log("no document");
  return Astro.redirect(routes.NOT_FOUND);
}

const { priceId } = document.data;

const ssid = session
  ? session.user?.ssid
  : Astro.cookies.get(SESSION_COOKIE).value;

if (!ssid) {
  console.log("no ssid");
  return Astro.redirect(routes.NOT_FOUND);
}

const pid = nanoid();
const docId =
  documentName && UUID.isValid(documentName) ? documentName : documentId;

try {
  await createPaymentSession(pid, ssid, docId);
} catch (e) {
  console.log("error creating payment session");
  console.log(e);
}

const stripe = new Stripe(import.meta.env.STRIPE_API_KEY, {
  apiVersion: import.meta.env.STRIPE_API_V,
});

const successUrl = `${Astro.url.origin}/dokument?${PARAMS.PAYMENT}=${pid}&${
  PARAMS.DRAFT
}=false${
  anonymousEmail ? `&${PARAMS.EMAIL}=${encodeURIComponent(anonymousEmail)}` : ``
}`;
const cancelUrl = anonymousEmail
  ? Astro.url.origin
  : UUID.isValid(docId)
  ? refererUrl
  : `${Astro.url.origin}/dokument?${PARAMS.PAYMENT}=${pid}&${PARAMS.DRAFT}=true`;

const stripeSession = await stripe.checkout.sessions.create({
  line_items: [
    {
      price: priceId,
      quantity: 1,
    },
  ],
  mode: "payment",
  success_url: successUrl,
  cancel_url: cancelUrl,
  customer_email: session ? (session.user?.email as string) : anonymousEmail,
});

if (stripeSession.url) {
  return Astro.redirect(stripeSession.url);
} else {
  return Astro.redirect(routes.NOT_FOUND);
}
---

<Layout title={pageTitle("ZamÃ³wienie")}>
  <Icon name="loader" width={64} height={64} />
</Layout>

<style is:inline>
  body {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100vh;
    width: 100vw;
  }
</style>@db/user
