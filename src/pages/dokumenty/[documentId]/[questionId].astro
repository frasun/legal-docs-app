---
import Layout from "../../../layouts/App.astro";
import { Icon } from "astro-icon";
import { getCollection, getEntry } from "astro:content";
import { getDocument, updateAnswers } from "../../../../db/document";
import { getSession } from "../../../auth-astro/server";
import crypt from "../../../utils/crypt";
import QuestionIndex from "../../../components/QuestionIndex.astro";
import ChangeNameButton from "../../../components/ChangeNameButton.astro";
import ChangeNameModal from "../../../components/ChangeNameModal.astro";
import { handleNameChange } from "../../../utils/document";
import Badge from "../../../components/Badge.astro";
import pageTitle from "../../../utils/pageTitle";
import QuestionAction from "../../../components/QuestionAction.astro";
import Toast from "../../../components/Toast.astro";
import { UPDATED_ANSWER_PARAM } from "../../../utils/toasts";

import { z } from "astro:content";

const { documentId: dId, questionId } = Astro.params;
const documentId = String(dId);
const session = await getSession(Astro.request);
const isUserDocument = Number(documentId) && session;

let answers, data, title;
let docId = documentId;
let draft = false;
let formData, docTitle;

if (Astro.request.method === "POST") {
  formData = await Astro.request.formData();
  docTitle = formData.get("title");

  if (docTitle && isUserDocument) {
    try {
      await handleNameChange(formData);
    } catch {}
  }
}

if (isUserDocument) {
  try {
    data = await getDocument(documentId);

    docId = data.doc;
    answers = data.answers;
    title = data.title;
    draft = data.draft;

    if (!draft) {
      return Astro.redirect(`/dokumenty/${documentId}/dokument`);
    }
  } catch {}
} else if (Astro.cookies.has(documentId)) {
  answers = Astro.cookies.get(documentId).json();
}

const document = await getEntry("documents", docId);

if (document) {
  if (!answers) {
    answers = document.data.seed;
  } else {
    document.data.encrypted.forEach((key) => {
      try {
        answers[key] = crypt.decrypt(answers[key]);
      } catch {}
    });
  }
} else {
  return Astro.redirect("/404");
}

const {
  data: { index: qIndex, title: docuemntTitle },
} = document;

if (!title) title = docuemntTitle;

const qs = JSON.parse(JSON.stringify(qIndex)).reduce(
  (pQuestions, { questions }) => pQuestions.concat(questions),
  []
);

const questions = await getCollection("questions", ({ slug }) =>
  qs.find(({ id: { slug: qSlug } }) => slug === qSlug)
);

const q = questions.find(({ slug }) => slug === questionId);
if (!q) {
  return Astro.redirect("/404");
}

const {
  data: { question: questionContent, info: qinfo },
} = q;

const { remarkPluginFrontmatter: qData, Content } = await q.render();

for (let key of Object.keys(qData)) {
  if (key !== "question" && answers[key]) qData[key] = answers[key];
}

const currentQuestionIndex = qs.findIndex(
  ({ id: { slug } }) => slug === questionId
);
const { title: qTitle } = qs[currentQuestionIndex];
const prevUrl =
  currentQuestionIndex > 0
    ? `${Astro.url.origin}/dokumenty/${documentId}/${
        qs[currentQuestionIndex - 1].id.slug
      }`
    : null;
const nextUrl = `${Astro.url.origin}/dokumenty/${documentId}/${
  currentQuestionIndex < qs.length - 1
    ? `${qs[currentQuestionIndex + 1].id.slug}`
    : `podsumowanie`
}`;

if (formData && !docTitle) {
  try {
    let newAnswers = {};
    let isEqual = true;

    for (let [key, value] of formData.entries()) {
      if (key in answers) {
        newAnswers[key] = value;
      }
    }

    for (let key of Object.keys(newAnswers)) {
      if (String(newAnswers[key]) !== String(answers[key])) {
        isEqual = false;
        break;
      }
    }

    if (!isEqual) {
      const allAnswers = { ...answers, ...newAnswers };

      if (isUserDocument) {
        if (Object.keys(newAnswers).length) {
          document.data.encrypted.forEach((key) => {
            allAnswers[key] = crypt.encrypt(allAnswers[key]);
          });

          try {
            await updateAnswers(documentId, allAnswers, docId);

            return Astro.redirect(`${Astro.url}?${UPDATED_ANSWER_PARAM}`);
          } catch (error) {
            console.log(error);
          }
        }
      } else {
        Astro.cookies.set(documentId, allAnswers, {
          maxAge: 600,
          httpOnly: true,
        });

        return Astro.redirect(nextUrl);
      }
    } else {
      return Astro.redirect(nextUrl);
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
    return Astro.redirect("/404");
  }
}
---

<Layout title={pageTitle(`${qTitle} - ${title}`)}>
  <span slot="topbar-title"
    ><span>{title}</span>{draft && <Badge>Szkic</Badge>}</span
  >
  {
    draft && (
      <ChangeNameButton
        id={documentId}
        title={title}
        slot="topbar-after-title"
      />
    )
  }
  <QuestionAction
    slot="topbar-aside"
    current={currentQuestionIndex + 1}
    steps={questions.length}
    answers={Astro.cookies.has(documentId)
      ? Object.entries(Astro.cookies.get(docId).json())
      : null}
    docId={docId}
  />
  <question-form>
    <form method="POST">
      <header>
        <h2>{questionContent}</h2>
        {
          qinfo && (
            <p>
              <Icon name="bulb" width={24} height={24} />
              {qinfo}
            </p>
          )
        }
      </header>
      <Content />
      <footer>
        <div>
          <span>§{currentQuestionIndex + 1}</span>
          <span>{qTitle}</span>
        </div>
        <nav>
          {
            draft ? (
              <>
                <a
                  href={`${Astro.url.origin}/dokumenty/${documentId}/podsumowanie`}
                >
                  Wróć do podsumowania
                </a>
                <button type="submit" disabled>
                  Zapisz zmiany
                </button>
              </>
            ) : (
              <>
                {prevUrl && <a href={prevUrl}>Poprzednie</a>}
                <button type="submit">
                  {currentQuestionIndex >= questions.length - 1
                    ? "Podsumowanie"
                    : "Następne"}
                </button>
              </>
            )
          }
        </nav>
      </footer>
    </form>
  </question-form>
  <QuestionIndex
    index={qIndex}
    current={questionId}
    documentId={documentId}
    documentTitle={docuemntTitle}
  />
  {draft && <ChangeNameModal />}
  <Toast />
</Layout>

<style>
  question-form {
    @apply w-full max-w-[780px] mx-auto;
    @apply flex flex-col justify-center min-h-full;
    @apply py-[var(--navbar-height)];
  }

  form {
    @apply flex flex-col gap-20;
  }

  form :global(fieldset) {
    @apply flex flex-col gap-20;
  }

  footer {
    @apply flex flex-wrap gap-10;
    @apply justify-between;
    @apply my-30;
  }

  footer div {
    @apply hidden md:flex gap-10 items-center;
  }

  footer div > span:first-child {
    @apply px-[8px] py-[4px] bg-dark10 rounded-sm text-xs font-bold;
  }

  footer nav {
    @apply flex flex-wrap gap-15;
  }

  footer a {
    @apply btn btn-alt btn-big;
  }

  footer button[type="submit"] {
    @apply btn btn-default btn-big;
    @apply self-end;
  }

  header p {
    @apply bg-white border-orange border-2 rounded-xl;
    @apply p-20;
    @apply flex gap-15;
    @apply font-serif italic text-dark90;
    @apply my-20;
  }

  header p svg {
    @apply flex-shrink-0;
    @apply text-orangeDark;
  }
</style>

<script>
  class QuestionForm extends HTMLElement {
    form: HTMLFormElement;
    submit: HTMLButtonElement;

    constructor() {
      super();

      this.form = this.querySelector("form");
      this.submit = this.form.querySelector("button[type='submit']");
    }

    connectedCallback() {
      this.form.addEventListener("input", () => {
        this.submit.removeAttribute("disabled");
      });
    }
  }
  customElements.define("question-form", QuestionForm);
</script>
