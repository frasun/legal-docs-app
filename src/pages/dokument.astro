---
import { getSession } from "auth-astro/server";
import { createDocument, publishDraft } from "@db/document";
import cryptr from "@utils/crypt";
import { getEntry } from "astro:content";
import { DRAFT_SAVED_PARAM } from "@utils/toasts";
import type { Answers } from "@type";

const session = await getSession(Astro.request);
const userId = session ? session.user?.id : null;

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const id = formData.get("id") as string;
  const draft = String(formData.get("draft")) === "true";

  let answers: Answers = {},
    encrypted: string[] = [];

  if (Number(id)) {
    try {
      await publishDraft(id);

      return Astro.redirect(`/dokumenty/${id}/dokument?success=true`);
    } catch {
      return Astro.redirect("/404");
    }
  } else {
    const template = await getEntry("documents", id);

    if (!template) {
      Astro.redirect("/404");
    } else {
      encrypted = template.data.encrypted?.length
        ? template.data.encrypted
        : [];
    }
  }

  formData.forEach((value, key) => {
    if (!["id", "draft"].includes(key)) {
      if (encrypted.includes(key) && answers[key] !== "") {
        answers[key] = cryptr.encrypt(String(value));
      } else {
        answers[key] = value as keyof Answers;
      }
    }
  });

  if (session && userId) {
    try {
      const docId = await createDoc(id, answers, draft, userId);

      if (docId) {
        return Astro.redirect(
          `${Astro.url.origin}/${
            draft
              ? `moje-dokumenty?${DRAFT_SAVED_PARAM}`
              : `dokumenty/${docId}/dokument?success=true`
          }`
        );
      } else {
        return Astro.redirect("/404");
      }
    } catch (e) {
      console.log(e);
      return Astro.redirect("/404");
    }
  } else {
    Astro.cookies.set(
      "document",
      { id, answers, draft },
      { maxAge: 6000, httpOnly: true }
    );
    return Astro.redirect("/zaloguj-sie?redirect=dokument");
  }
} else if (Astro.cookies.has("document") && userId) {
  const { id, answers, draft } = Astro.cookies.get("document").json();
  const docId = await createDoc(id, answers, draft, userId);

  Astro.cookies.delete("document");

  if (docId) {
    return Astro.redirect(
      `${Astro.url.origin}/${
        draft ? `moje-dokumenty` : `dokumenty/${docId}/dokument?success=true`
      }`
    );
  } else {
    return Astro.redirect("/404");
  }
} else {
  return Astro.redirect("/404");
}

async function createDoc(
  id: string,
  answers: Answers,
  draft: boolean,
  userId: string
) {
  const document = await createDocument(id, answers, userId, draft);
  const docId = document ? document.id : null;

  return docId;
}
---
