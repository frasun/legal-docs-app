---
import Layout from "../../../layouts/App.astro";
import QuestionIndex from "../../../components/QuestionIndex.astro";
import { getDocument, updateAnswers } from "../../../../db/document";

const { documentId, questionId } = Astro.params;

let index, question, answers;
let data = [];
let docId = documentId;

if (Number(documentId)) {
  data = await getDocument(documentId);

  if (data.length) {
    docId = data[0].doc;
    answers = data[0].answers;
  } else {
    return Astro.redirect("/404");
  }
} else if (Astro.cookies.has(documentId)) {
  answers = Astro.cookies.get(documentId).json();
} else {
  const { frontmatter } = await import(
    `../../../templates/documents/${docId}.mdx`
  );
  answers = frontmatter;
}

try {
  index = await import(`../../../templates/${docId}-index.mdx`);
  question = await import(
    `../../../templates/questions/${docId}/${questionId}.mdx`
  );
} catch (e) {
  if (!index || !question) {
    return Astro.redirect("/404");
  }
}

for (let key of Object.keys(question.frontmatter)) {
  if (key !== "question" && answers[key])
    question.frontmatter[key] = answers[key];
}

const {
  Content,
  frontmatter: { question: questionContent },
} = question;

const {
  frontmatter: { index: questionsIndex },
} = index;

const questions = questionsIndex.filter(({ id }) => id);
const currentQuestionIndex = questions.findIndex(({ id }) => id === questionId);
const currentQuestion = questions[currentQuestionIndex];
const nextQuestionIndex =
  currentQuestionIndex < questions.length - 1 ? currentQuestionIndex + 1 : -1;
const nextQuestionId =
  nextQuestionIndex > 0 ? questions[nextQuestionIndex].id : null;
const prevQuestionId =
  currentQuestionIndex > 0 ? questions[currentQuestionIndex - 1].id : null;

const nextQuestionUrl = `${Astro.url.origin}/dokumenty/${documentId}/${
  nextQuestionId ? nextQuestionId : `podsumowanie`
}`;
const prevQuestionUrl = `${Astro.url.origin}/dokumenty/${documentId}/${prevQuestionId}`;

if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData();

    let newAnswers = {};
    for (let [key, value] of formData) {
      if (answers[key] !== value) {
        newAnswers[key] = value;
      }
    }

    const allAnswers = { ...answers, ...newAnswers };

    if (Number(documentId)) {
      if (Object.keys(newAnswers).length) {
        await updateAnswers(1, allAnswers);
      }
    } else {
      Astro.cookies.set(documentId, allAnswers, { maxAge: 60 });
    }

    return Astro.redirect(nextQuestionUrl);
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
    return Astro.redirect("/404");
  }
}
---

<Layout title={`${currentQuestion.title} - ${index.frontmatter.title}`}>
  <form method="POST" data-validation={currentQuestion.validation}>
    <h3>{questionContent}</h3>
    <Content />
    <footer>
      <div>
        <span>§{currentQuestionIndex + 1}</span>
        <span>{currentQuestion.title}</span>
      </div>
      <nav>
        {currentQuestionIndex > 0 && <a href={prevQuestionUrl}>Poprzednie</a>}
        <button type="submit"
          >{
            currentQuestionIndex >= questions.length - 1
              ? "Podsumowanie"
              : "Następne"
          }</button
        >
      </nav>
    </footer>
  </form>
  <aside>
    <QuestionIndex
      index={questionsIndex}
      current={currentQuestion.id}
      documentid={documentId}
    />
  </aside>
</Layout>

<style>
  form {
    @apply container;
  }

  footer {
    @apply flex flex-wrap gap-10;
    @apply justify-between;
    @apply my-30;
  }

  footer nav {
    @apply flex flex-wrap gap-15;
  }

  footer a {
    @apply btn btn-alt;
  }

  footer button[type="submit"] {
    @apply btn btn-default;
    @apply self-end;
  }
</style>
