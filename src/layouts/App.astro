---
import Layout from "./Layout.astro";
import { getSession } from "auth-astro/server";
import Appbar from "@components/Appbar.astro";
import FooterCopy from "@components/FooterCopy.astro";
import Footer from "@components/Footer.astro";
import Badge, { BadgeSize } from "@components/Badge.astro";

export enum LayoutType {
  container = "container",
  centered = "centered",
  wide = "wide",
  sidebar = "sidebar",
}

export enum FooterType {
  default = "default",
  short = "short",
}

export interface Props {
  title: string;
  keywords?: string;
  description?: string;
  image?: string;
  pageName: string;
  layout?: LayoutType;
  footer?: FooterType;
  highlightTitle?: boolean;
}

const {
  title,
  description,
  keywords,
  image,
  pageName,
  layout = LayoutType.container,
  footer = FooterType.default,
  highlightTitle = true,
} = Astro.props;
const session = await getSession(Astro.request);
const userEmail = session?.user?.email ?? undefined;
---

<Layout
  title={pageName}
  description={description}
  keywords={keywords}
  image={image}
>
  <Appbar email={userEmail} />
  {
    layout === LayoutType.sidebar ? (
      <div>
        <nav>
          <slot name="sidebar" />
        </nav>
        <main data-layout={layout}>
          <header>
            <h1>
              {highlightTitle ? (
                <Badge size={BadgeSize.large}>{title}</Badge>
              ) : (
                title
              )}
              <slot name="topbar-after-title" />
            </h1>
            <slot name="topbar-aside" />
          </header>
          <slot />
        </main>
      </div>
    ) : (
      <>
        {title !== "" && (
          <header>
            <h1>
              {highlightTitle ? (
                <Badge size={BadgeSize.large}>{title}</Badge>
              ) : (
                title
              )}
              <slot name="topbar-after-title" />
            </h1>
            <slot name="topbar-aside" />
          </header>
        )}
        <main data-layout={layout}>
          <slot />
        </main>
      </>
    )
  }
  <footer data-type={footer}>
    {
      footer === FooterType.default ? (
        <Footer isSignedIn={Boolean(session)} />
      ) : (
        <FooterCopy />
      )
    }
    <slot name="footer" />
  </footer>
</Layout>

<style>
  header {
    @apply lg:container;
    @apply px-20 lg:px-30 py-15;
    @apply flex items-center flex-wrap;
    @apply bg-white;
    @apply gap-15 md:gap-30;
    @apply z-50;
    @apply w-full min-h-[70px];
  }

  header > h1 {
    @apply flex-grow flex gap-5 items-center;
  }

  header h1 {
    @apply text-italic-md text-black;
  }

  header h1 :global(> span) {
    @apply flex items-center gap-5;
    @apply flex-wrap md:flex-nowrap;
  }

  header h1 :global(> span > span:first-child) {
    @apply line-clamp-2 md:line-clamp-1;
  }

  main {
    @apply grid grid-cols-12 md:gap-x-40 grid-flow-row auto-rows-max;
    @apply flex-grow;
  }

  main[data-layout="container"] {
    @apply px-20 lg:container;
  }

  main[data-layout="centered"] {
    @apply container;
    @apply content-center;
  }

  main[data-layout="sidebar"] {
    @apply content-center;
  }

  footer[data-type="default"] {
    @apply bg-black text-white/70;
    @apply mt-60;
  }

  footer[data-type="short"] {
    @apply text-black/50;
  }

  footer span {
    @apply text-sans-xxs;
  }

  div {
    @apply px-20 lg:container;
    @apply grid grid-cols-12 md:gap-x-40;
    @apply flex-grow;
  }

  div nav {
    @apply hidden lg:flex flex-col lg:col-span-3;
  }

  div main {
    @apply col-span-12 lg:col-span-9 lg:col-start-4;
    @apply flex flex-col;
  }

  div main header {
    @apply px-0;
  }
</style>
