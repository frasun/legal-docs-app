---
import Layout from "../../../layouts/App.astro";
import { getDocument, createDocument } from "../../../../db/document";
import { getSession } from "../../../auth-astro/server";
import { getUserByEmail } from "../../../../db/auth";

const { documentId } = Astro.params;
const session = await getSession(Astro.request);

let data;

Astro.cookies.delete(documentId);

if (!session) {
  return Astro.redirect("/zaloguj-sie");
}

const { id: userId } = await getUserByEmail(session.user.email);

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  let answers = {};

  formData.forEach((value, key) => (answers[key] = value));

  const { id } = await createDocument(documentId, answers, userId);

  if (id) {
    return Astro.redirect(`${Astro.url.origin}/dokumenty/${id}/dokument`);
  } else {
    return Astro.redirect("/404");
  }
}

if (Number(documentId)) {
  data = await getDocument(documentId);

  if (!data) {
    return Astro.redirect("/404");
  }
} else {
  return Astro.redirect("/404");
}

const { answers, doc: docId } = data;
const { frontmatter, Content } = await import(
  `../../../templates/documents/${docId}.mdx`
);

for (let key of Object.keys(frontmatter)) {
  if (key !== "title") frontmatter[key] = answers[key];
}
---

<Layout title={`Dokument - ${frontmatter.title}`}>
  <article id="doc" class="prose" data-title={frontmatter.title}>
    <Content />
  </article>
  <aside>
    <h3>Tw√≥j dokument jest gotowy!</h3>
    <download-button content-id="#doc">
      <button>Pobierz plik Word</button>
    </download-button>
    <print-button>
      <button>Drukuj</button>
    </print-button>
  </aside>
</Layout>

<style>
  article {
    @apply bg-white p-30 lg:p-50 w-[90vw];
    @apply order-2 lg:order-1;
  }

  aside {
    @apply order-1 lg:order-2;
    @apply flex lg:flex-col gap-10 items-start;
    @apply sticky top-30;
    @apply print:hidden;
  }

  aside button {
    @apply btn btn-default btn-big;
  }
</style>
<script>
  import exportDoc from "../../../utils/exportDoc";

  class DownloadButton extends HTMLElement {
    contentId: string;
    button: HTMLButtonElement;

    constructor() {
      super();

      this.contentId = this.getAttribute("content-id");
      this.button = this.querySelector("button");
    }

    connectedCallback() {
      this.button.addEventListener("click", () => {
        const docContent = document.querySelector(this.contentId);

        exportDoc(docContent.innerHTML, docContent.getAttribute("data-title"));
      });
    }
  }
  customElements.define("download-button", DownloadButton);

  class PrintButton extends HTMLElement {
    button: HTMLButtonElement;

    constructor() {
      super();

      this.button = this.querySelector("button");
    }

    connectedCallback() {
      this.button.addEventListener("click", () => {
        window.print();
      });
    }
  }
  customElements.define("print-button", PrintButton);
</script>
