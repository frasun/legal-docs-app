---
import { Icon } from "astro-icon";

const menuItems = [
  { id: "", label: "Dokumenty" },
  { id: "jaktodziala", label: "Jak to działa?" },
  { id: "dlakogo", label: "Dla kogo?" },
];
---

<page-menu>
  <nav id="menuNav">
    <div>
      {menuItems.map((item) => <a href={`#${item.id}`}>{item.label}</a>)}
    </div>
    <aside>
      <a href="/umowa-najmu">Załóż konto</a>
      <a href="#">Zaloguj się</a>
    </aside>
  </nav>
  <button id="menuToggle" aria-label="toggle menu">
    <Icon name="menu" id="menuOpen" width={24} height={24} />
    <Icon name="close" id="menuClose" width={24} height={24} />
  </button>
</page-menu>

<style>
  #menuNav {
    @apply flex lg:items-center justify-end flex-col lg:flex-row;
    @apply gap-40;
    @apply basis-full shrink-0 lg:basis-auto;
    @apply order-3 lg:order-2;
    @apply absolute lg:relative;
    @apply left-0 right-0 top-0;
    @apply bg-white lg:bg-transparent;
    @apply px-20 pb-20 py-[80px] lg:p-0;
    @apply -z-10 lg:z-0;
    @apply -translate-y-[200%] lg:translate-y-0;
  }

  @screen lg {
    #menuNav {
      --tw-translate-y: 0;
    }
  }

  #menuNav > div {
    @apply flex flex-wrap flex-col lg:flex-row gap-20;
  }

  #menuNav > div > a {
    @apply lg:text-sm;
  }

  #menuNav > aside {
    @apply flex gap-15;
  }

  #menuNav > aside > a {
    @apply btn btn-default;
  }

  #menuToggle {
    @apply btn btn-alt;
    @apply order-2 lg:order-3;
    @apply lg:hidden;
    @apply relative;
  }

  #menuToggle[data-open="true"] #menuOpen,
  #menuToggle #menuClose,
  #menuToggle[data-open="false"] #menuClose {
    @apply hidden;
  }

  #menuToggle #menuOpen,
  #menuToggle[data-open="true"] #menuClose {
    @apply inline-block;
  }
</style>

<script>
  import * as utils from "../utils/backdrop";

  class PageMenu extends HTMLElement {
    MENU_BREAKDOWN: number;
    TRANSITION_TRANSFORM: string;
    MENU_ZINDEX: string;
    TRANSLATE_PROP: string;
    menuToggle: HTMLButtonElement;
    menuNav: HTMLElement;
    _menuOpen: boolean;

    constructor() {
      super();

      this.MENU_BREAKDOWN = 1024;
      this.TRANSITION_TRANSFORM = "transition-transform";
      this.MENU_ZINDEX = "z-30";
      this.TRANSLATE_PROP = "--tw-translate-y";

      this.menuToggle = this.querySelector("#menuToggle");
      this.menuNav = this.querySelector("#menuNav");
      this._menuOpen = false;
    }

    connectedCallback() {
      this.menuToggle.addEventListener("click", () =>
        this.toggleMenu(this._menuOpen)
      );

      window.addEventListener("resize", () => {
        if (this._menuOpen) {
          this.toggleMenu(true, false);
        }
      });
    }

    toggleMenu(isOpen, transition = true, callback?) {
      transition
        ? this.menuNav.classList.add(this.TRANSITION_TRANSFORM)
        : this.menuNav.classList.remove(this.TRANSITION_TRANSFORM);

      if (!isOpen && window.innerWidth < this.MENU_BREAKDOWN) {
        this.menuNav.style.setProperty(this.TRANSLATE_PROP, "0");
      } else {
        this.menuNav.style.removeProperty(this.TRANSLATE_PROP);
      }
      this.menuToggle.setAttribute("data-open", Boolean(!isOpen).toString());

      this.menuNav.addEventListener("transitionend", () => {
        this.menuNav.classList.remove(this.TRANSITION_TRANSFORM);
        callback && callback();
      });

      isOpen
        ? utils.removeBackdrop(transition)
        : utils.addBackdrop(() => {
            this.toggleMenu(true);
          }, this.MENU_ZINDEX);

      this._menuOpen = !isOpen;
    }
  }

  customElements.define("page-menu", PageMenu);
</script>
