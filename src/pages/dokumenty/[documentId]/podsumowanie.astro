---
import Layout from "../../../layouts/App.astro";
import Answer from "@components/Answer.astro";
import { getSession } from "auth-astro/server";
import ChangeNameButton from "@components/ChangeNameButton.astro";
import ChangeNameModal from "@components/ChangeNameModal.astro";
import Badge from "@components/Badge.astro";
import pageTitle from "@utils/pageTitle";
import type { TemplateSummary } from "@type";
import { deleteSessionDocument } from "@db/session";
import { SESSION_COOKIE } from "@utils/cookies";
import PaymentModal from "@components/PaymentModal.astro";
import * as PARAMS from "@utils/urlParams";
import { UUID } from "mongodb";
import routes from "@utils/routes";
import { getTemplateSummary } from "@api/templates";
import { UserRoles } from "@db/user";
import { captureError } from "@utils/sentry";
import SaveDraft from "@components/SaveDarft.astro";

const { documentId } = Astro.params as { documentId: string };
const session = await getSession(Astro.request);
const isUserDocument = UUID.isValid(documentId);
const isAdmin = session?.user?.role === UserRoles.admin;

const ssid = session
  ? session.user?.ssid
  : Astro.cookies.get(SESSION_COOKIE).value;

if (!ssid) {
  return Astro.redirect(routes.NOT_FOUND);
}

if (!isUserDocument) {
  const refererUrl = Astro.request.headers.get("referer");

  if (!refererUrl || !refererUrl.includes(documentId)) {
    await deleteSessionDocument(ssid, documentId);
  }
}

let answers: TemplateSummary["answers"] = {},
  index: TemplateSummary["index"] = [],
  title: TemplateSummary["title"] = "",
  canGenerate: TemplateSummary["canGenerate"] = true;

const GENERATE = "Generuj dokument";

try {
  ({ title, answers, index, canGenerate } = await getTemplateSummary(
    documentId,
    `${Astro.request.headers.get("cookie")}`
  ));
} catch (e) {
  if (e instanceof Error) {
    switch (e.cause) {
      case 403:
        return Astro.redirect(
          `${routes.SIGN_IN}?${PARAMS.REDIRECT}=${Astro.url.pathname}`
        );

      case 303:
        return Astro.redirect(`${routes.DOCUMENTS}/${documentId}/dokument`);

      case 404:
        return Astro.redirect(routes.NOT_FOUND);

      default:
        captureError(e);
        return Astro.redirect(routes.NOT_FOUND);
    }
  }
}
---

<Layout title={pageTitle(`Podsumowanie - ${title}`)}>
  <span slot="topbar-title"><span>{title}</span><Badge>Szkic</Badge></span>
  {
    isUserDocument && (
      <ChangeNameButton
        id={documentId}
        title={title}
        slot="topbar-after-title"
      />
    )
  }
  <section>
    <h1>Podsumowanie</h1>
    {
      index.map(({ title, questions }) => (
        <>
          <h5>{title}</h5>
          {questions.map(({ title, slug, answer, token, type }) => (
            <div>
              <div>
                <h6>{title}</h6>
                <Answer
                  template={answer}
                  data={answers}
                  token={token}
                  type={type}
                />
              </div>
              <a href={`${Astro.url.origin}/dokumenty/${documentId}/${slug}`}>
                Zmień
              </a>
            </div>
          ))}
        </>
      ))
    }
    <footer>
      {
        canGenerate ? (
          session ? (
            isAdmin ? (
              <a
                href={`${Astro.url.origin}${routes.DOCUMENT}?${PARAMS.DOCUMENT}=${documentId}&${PARAMS.DRAFT}=false`}
              >
                {GENERATE}
              </a>
            ) : (
              <a
                href={`${Astro.url.origin}${routes.DOCUMENTS}/${documentId}${routes.ORDER}`}
              >
                {GENERATE}
              </a>
            )
          ) : (
            <show-modal data-modal="payment">
              <button>{GENERATE}</button>
            </show-modal>
          )
        ) : (
          <h4>Aby wygenerować dokument wypełnij wszystkie wymagane pola</h4>
        )
      }
      {!isUserDocument && <SaveDraft documentId={documentId} />}
    </footer>
  </section>
  <ChangeNameModal />
  <PaymentModal documentId={documentId} />
</Layout>
<style>
  section {
    @apply max-w-[1000px] mx-auto w-full mt-20;
  }

  section h1 {
    @apply text-2xl;
  }

  section h5 {
    @apply mt-30 mb-10 font-sans font-bold text-sm tracking-normal text-dark55;
  }

  section > div {
    @apply bg-white my-10 py-15 px-20 rounded-lg;
    @apply flex items-start sm:items-center gap-10;
    @apply flex-col sm:flex-row;
  }

  section > div > div {
    @apply flex-grow;
  }

  section a {
    @apply btn btn-alt;
  }

  footer {
    @apply pt-50;
    @apply flex flex-col justify-center gap-20 items-center;
  }

  footer a {
    @apply btn btn-alt;
  }

  footer a:first-child,
  footer button,
  show-payment-modal button {
    @apply btn btn-default btn-big;
  }
</style>

<script>
  import "@wc/ShowModal";
</script>
