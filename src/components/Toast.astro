---
import { Icon } from "astro-icon";
import toasts from "../utils/toasts";
---

{
    toasts.map(({ param, info }) =>
        Astro.url.searchParams.has(param) ? (
            <toast-element>
                <Icon name="tick" width={32} height={32} />
                {info}
            </toast-element>
        ) : null
    )
}

<style>
    toast-element {
        @apply py-15 px-20 bg-dark90 text-light rounded z-max;
        @apply fixed top-15 right-15;
        @apply opacity-0 translate-x-[calc(100%_+_15px)];
        @apply w-[260px];
        @apply leading-tight;
        @apply flex gap-15;

        animation-name: showToast;
        animation-duration: 5s;
        animation-timing-function: linear;
        animation-delay: 0.2s;
        animation-iteration-count: 1;
    }

    toast-element svg {
        @apply text-light;
    }

    @keyframes showToast {
        0% {
            @apply translate-x-0;
        }

        5% {
            @apply opacity-100;
            @apply translate-x-0;
        }

        90% {
            @apply opacity-100;
            @apply translate-x-0;
        }

        95% {
            @apply opacity-0;
            @apply translate-x-0;
        }

        100% {
            @apply translate-x-[calc(100%_+_15px)];
            @apply opacity-0;
        }
    }
</style>

<script>
    import toasts from "../utils/toasts";

    class ToastElement extends HTMLElement {
        constructor() {
            super();
        }

        connectedCallback() {
            const url = new URL(window.location.href);

            toasts.forEach(({ param }) => url.searchParams.delete(param));
            window.history.replaceState({}, "", url.toString());

            this.addEventListener("animationend", () => this.remove());
        }
    }
    customElements.define("toast-element", ToastElement);
</script>
