---
import { getCollection } from "astro:content";
import Layout from "../../layouts/App.astro";

const PAGE_TITLE = "Wszystkie dokumenty";

const url = new URL(Astro.request.url);
const currentCat = url.searchParams.get("kategoria");

const categories = await getCollection("categories");
const documents = await getCollection("documents", ({ data: { categories } }) =>
  currentCat ? categories.find(({ id }) => id === currentCat) : true
);

const currentCategory = categories.find(({ id }) => id === currentCat);
const title = currentCategory ? currentCategory.data.name : PAGE_TITLE;

const getCategoryName = (slug) => {
  const ct = categories.find(({ id }) => id === slug);

  return ct ? ct.data.name : null;
};
---

<Layout title={`${title} - Prawniczek`}>
  <span slot="topbar-title">{title}</span>
  <category-selector slot="topbar-aside">
    <label for="category">Kategorie</label>
    <select id="category">
      <option value="">Wszystkie</option>
      {
        categories.map(({ id, data: { name } }) => (
          <option value={id} selected={id === currentCat}>
            {name}
          </option>
        ))
      }
    </select>
  </category-selector>
  <section>
    {
      documents.length ? (
        documents.map(({ slug, data: { title, categories: cats } }) => (
          <div>
            <a href={`${Astro.url.origin}/dokumenty/${slug}`}>
              <h3>{title}</h3>
            </a>
            <h6>Kategorie</h6>
            <div>
              {cats.map(({ id }) => (
                <a href={`${Astro.url.origin}/dokumenty?kategoria=${id}`}>
                  {getCategoryName(id)}
                </a>
              ))}
            </div>
          </div>
        ))
      ) : (
        <p>Brak dokumentów do wyświetlenia</p>
      )
    }
  </section>
</Layout>

<style>
  section {
    @apply flex gap-20 flex-wrap w-full;
  }

  section > div {
    @apply flex p-20 bg-white rounded flex-col;
  }

  section > div > div {
    @apply flex flex-wrap gap-10;
  }

  category-selector {
    @apply flex gap-10 items-center;
  }
</style>

<script>
  class CategorySelector extends HTMLElement {
    select: HTMLSelectElement;

    constructor() {
      super();

      this.select = this.querySelector("select") as HTMLSelectElement;
    }

    connectedCallback() {
      this.select.addEventListener("change", (event) => {
        const val = (event.target as HTMLInputElement).value;

        let url = `${window.location.origin}/dokumenty${
          val.length ? `?kategoria=${val}` : ``
        }`;

        document.location = url;
      });
    }
  }
  customElements.define("category-selector", CategorySelector);
</script>
