---
import RadioButtons from "./RadioButtons.astro";
import lib from "../content/questions/_lib";
import { entityEnum } from "../content/documents/_umowa-najmu";

const { name, selected, data } = Astro.props;
---

<data-selector>
  <RadioButtons values={lib} selected={selected} name={`${name}-data`} />
  <fieldset style={parseInt(selected) === 0 ? `display: none;` : ``}>
    <div class="input-group">
      <label for="type">Rodzaj podmiotu</label>
      <select id="type" name={`${name}-type`} value={data[0]}>
        {
          entityEnum.map((type) => (
            <option selected={data[0] === type}>{type}</option>
          ))
        }
      </select>
    </div>
    <div class="input-group">
      <label for="name">ImiÄ™ i nazwisko / nazwa</label>
      <input
        id="name"
        type="text"
        name={`${name}-name`}
        required={parseInt(selected) === 0 ? false : true}
        value={data[1]}
        class="flex-grow"
      />
    </div>
    <div class="input-group">
      <label for="address">Adres</label>
      <input
        id="address"
        type="text"
        name={`${name}-address`}
        required={parseInt(selected) === 0 ? false : true}
        value={data[2]}
        class="flex-grow"
      />
    </div>
    <div class="input-group">
      <label for="pin">PESEL / NIP</label>
      <input
        id="pin"
        type="text"
        name={`${name}-pin`}
        required={parseInt(selected) === 0 ? false : true}
        value={data[3]}
      />
    </div>
  </fieldset>
</data-selector>
<script>
  class DataSelector extends HTMLElement {
    radios: NodeListOf<HTMLInputElement>;
    fieldset: HTMLFieldSetElement;

    constructor() {
      super();

      this.radios = this.querySelectorAll('input[type="radio"]');
      this.fieldset = this.querySelector("fieldset");
    }

    connectedCallback() {
      Array.from(this.radios).forEach((radio) => {
        radio.addEventListener("change", () => {
          if (radio.value === "0") {
            this.resetForm();
          } else {
            this.setForm();
          }
        });
      });
    }

    resetForm() {
      const inputs = this.fieldset.querySelectorAll("input");
      const selects = this.fieldset.querySelectorAll("select");

      this.fieldset.style.display = "none";

      Array.from(inputs).forEach((input) => {
        input.value = "";
        input.required = false;
      });
      Array.from(selects).forEach((select) => (select.selectedIndex = 0));
    }

    setForm() {
      const inputs = this.fieldset.querySelectorAll("input");
      const selects = this.fieldset.querySelectorAll("select");

      this.fieldset.removeAttribute("style");

      Array.from(inputs).forEach((input) => {
        input.value = "";
        input.required = true;
      });

      Array.from(selects).forEach((select) => {
        select.selectedIndex = 0;
      });
    }
  }

  customElements.define("data-selector", DataSelector);
</script>

<style>
  data-selector {
    @apply flex flex-col gap-30;
  }
</style>
