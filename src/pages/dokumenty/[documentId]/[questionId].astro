---
import Layout from "../../../layouts/App.astro";
import { Icon } from "astro-icon";
import { getEntry } from "astro:content";
import QuestionIndex from "@components/QuestionIndex.astro";
import ChangeNameButton from "@components/ChangeNameButton.astro";
import ChangeNameModal from "@components/ChangeNameModal.astro";
import Badge from "@components/Badge.astro";
import pageTitle from "@utils/pageTitle";
import QuestionAction from "@components/QuestionAction.astro";
import type { Answers, Question } from "@type";
import { UUID } from "mongodb";
import routes from "@utils/routes";
import { REDIRECT } from "@utils/urlParams";
import { getQuestion } from "@api/templates";
import { captureError } from "@utils/sentry";

const { documentId, questionId } = Astro.params as {
  documentId: string;
  questionId: string;
};
const isUserDocument = UUID.isValid(documentId);
const cookie = `${Astro.request.headers.get("cookie")}`;

let answers: Answers = {},
  qData: Answers = {},
  Content,
  templateId = documentId as string,
  draft: Question["draft"] = false,
  question: Question["question"] = "",
  info: Question["info"],
  documentTitle: Question["documentTitle"] = "",
  index: Question["index"] = [],
  prevId: Question["prevId"],
  nextId: Question["nextId"] = routes.SUMMARY,
  currentQuestionIndex: Question["currentQuestionIndex"] = 0,
  questionShort: Question["questionShort"],
  questionIndex: Question["questionIndex"] = 0,
  prevUrl: string | null = null,
  nextUrl: string | null = null;

// get data
try {
  // get question data
  ({
    documentTitle,
    templateId,
    draft,
    index,
    prevId,
    nextId,
    question,
    questionShort,
    info,
    answers,
    currentQuestionIndex,
    questionIndex,
  } = await getQuestion(cookie, documentId, questionId));

  const questionEntry = await getEntry("questions", questionId as string);

  if (!questionEntry) {
    throw new Error(undefined, { cause: 500 });
  }

  ({ remarkPluginFrontmatter: qData, Content } = await questionEntry.render());

  // replace default answers in mdx
  for (let key of Object.keys(qData)) {
    qData[key] = answers[key];
  }

  // // get next/prev links
  prevUrl = prevId
    ? `${Astro.url.origin}${routes.DOCUMENTS}/${documentId}/${prevId}`
    : null;

  nextUrl = `${Astro.url.origin}${routes.DOCUMENTS}/${documentId}/${
    nextId ?? routes.SUMMARY
  }`;
} catch (e) {
  if (e instanceof Error) {
    switch (e.cause) {
      case 403:
        return Astro.redirect(
          `${routes.SIGN_IN}?${REDIRECT}=${Astro.url.pathname}`
        );

      case 303:
        return Astro.redirect(
          `${routes.DOCUMENTS}/${documentId}${routes.DOCUMENT}`
        );

      case 404:
        return Astro.redirect(routes.NOT_FOUND);

      default:
        captureError(e);
        return Astro.redirect(routes.NOT_FOUND);
    }
  }
}
---

<Layout title={pageTitle(`${questionShort} - ${documentTitle}`)}>
  <span slot="topbar-title">
    <span>{documentTitle}</span><Badge>Szkic</Badge>
  </span>
  {
    isUserDocument && (
      <ChangeNameButton
        id={documentId}
        title={documentTitle}
        slot="topbar-after-title"
      />
    )
  }
  <QuestionAction
    slot="topbar-aside"
    current={currentQuestionIndex + 1}
    steps={questionIndex}
    docId={templateId}
    draft={draft}
  />
  <question-form
    data-document-id={documentId}
    data-next-url={nextUrl}
    data-fields={JSON.stringify(Object.keys(answers))}
  >
    <form method="POST">
      <header>
        <h2>{question}</h2>
        {
          info && (
            <p>
              <Icon name="bulb" width={24} height={24} />
              {info}
            </p>
          )
        }
      </header>
      {Content && <Content />}
      <footer>
        <div>
          <span>§{currentQuestionIndex + 1}</span>
          {questionShort && <span>{questionShort}</span>}
        </div>
        <nav>
          {
            isUserDocument ? (
              <>
                <a
                  href={`${Astro.url.origin}${routes.DOCUMENTS}/${documentId}${routes.SUMMARY}`}
                >
                  Wróć do podsumowania
                </a>
                <button type="submit" disabled>
                  Zapisz zmiany
                </button>
              </>
            ) : (
              <>
                {prevUrl && <a href={prevUrl}>Poprzednie</a>}
                <button type="submit">
                  {currentQuestionIndex >= questionIndex - 1
                    ? "Podsumowanie"
                    : "Następne"}
                </button>
              </>
            )
          }
        </nav>
      </footer>
    </form>
  </question-form>
  {
    index && questionId && (
      <QuestionIndex
        index={index}
        current={questionId}
        documentId={documentId}
        documentTitle={documentTitle}
      />
    )
  }
  {draft && <ChangeNameModal />}
</Layout>

<style>
  question-form {
    @apply w-full max-w-[780px] mx-auto;
    @apply flex flex-col justify-center min-h-full;
    @apply py-[var(--navbar-height)];
  }

  form {
    @apply flex flex-col gap-20;
  }

  form :global(fieldset) {
    @apply flex flex-col gap-20;
  }

  footer {
    @apply flex flex-wrap gap-10;
    @apply justify-between;
    @apply my-30;
  }

  footer div {
    @apply hidden md:flex gap-10 items-center;
  }

  footer div > span:first-child {
    @apply px-[8px] py-[4px] bg-dark10 rounded-sm text-xs font-bold;
  }

  footer nav {
    @apply flex flex-wrap gap-15;
  }

  footer a {
    @apply btn btn-alt btn-big;
  }

  footer button[type="submit"] {
    @apply btn btn-default btn-big;
    @apply self-end;
  }

  header p {
    @apply bg-white border-dark55 border-2 rounded-xl;
    @apply p-20;
    @apply flex gap-15;
    @apply font-serif italic text-dark90;
    @apply my-20;
  }

  header p svg {
    @apply flex-shrink-0;
    @apply text-orangeDark;
  }
</style>

<script>
  import "@wc/QuestionForm";
</script>
