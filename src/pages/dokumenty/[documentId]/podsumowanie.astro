---
import { getEntry } from "astro:content";
import Layout from "../../../layouts/App.astro";
import Answer from "../../../components/Answer.astro";
import { getDocument } from "../../../../db/document";
import { getSession } from "../../../auth-astro/server";
import tSeed from "../../../utils/transformSeed";
import crypt from "../../../utils/crypt";
import { Icon } from "astro-icon";

const { documentId: dId } = Astro.params;
const documentId = String(dId);

const session = await getSession(Astro.request);

let docId = documentId;
let draft = false;
let data, answers, title;

if (Number(documentId)) {
  if (!session) {
    return Astro.redirect("/");
  }

  data = await getDocument(documentId);

  if (data) {
    docId = data.doc;
    answers = data.answers;
    draft = data.draft;
    title = data.title;
  } else {
    return Astro.redirect("/404");
  }
} else if (Astro.cookies.has(documentId)) {
  answers = Astro.cookies.get(documentId).json();
}

const document = await getEntry("documents", docId);

if (document) {
  if (!answers) {
    answers = tSeed(document.data.seed);
  } else {
    document.data.encrypted.forEach((key) => {
      try {
        answers[key] = crypt.decrypt(answers[key]);
      } catch {}
    });
  }
} else {
  return Astro.redirect("/404");
}

const {
  data: { index },
} = document;

if (!title) title = document.data.title;
---

<Layout title={`Podsumowanie - ${title}`}>
  <span slot="topbar-title">{title}{draft && <span> - Szkic</span>}</span>
  {
    Astro.cookies.has(documentId) ? (
      <form
        method="POST"
        action={`${Astro.url.origin}/dokument`}
        slot="topbar-aside"
      >
        {Object.entries(Astro.cookies.get(docId).json()).map(([key, value]) => (
          <input type="hidden" name={key} value={String(value)} />
        ))}
        <input type="hidden" name="id" value={docId} />
        <input type="hidden" name="draft" value="true" />
        <button>
          <Icon name="save" width={16} height={16} />
          Zapisz
        </button>
      </form>
    ) : null
  }
  <section>
    <h1>Podsumowanie</h1>
    {
      index.map(({ title, questions }) => (
        <>
          <h4>{title}</h4>
          {questions.map(({ title, token, template, type, id: { slug } }) => (
            <div>
              <div>
                <h6>{title}</h6>
                <Answer
                  data={answers}
                  template={template}
                  token={token}
                  type={type}
                />
              </div>
              <a href={`${Astro.url.origin}/dokumenty/${documentId}/${slug}`}>
                Zmień
              </a>
            </div>
          ))}
        </>
      ))
    }
    <footer>
      {
        Number(documentId) && !draft ? (
          <a href={`${Astro.url.origin}/dokumenty/${documentId}/dokument`}>
            Wyświetl dokument
          </a>
        ) : (
          <form method="POST" action={`${Astro.url.origin}/dokument`}>
            {Object.entries(answers).map(([key, value]) => (
              <input type="hidden" name={key} value={String(value)} />
            ))}
            <input type="hidden" name="id" value={documentId} />
            <button type="submit">Generuj dokument</button>
          </form>
        )
      }
    </footer>
  </section>
</Layout>
<style>
  section {
    @apply container;
  }

  section h4 {
    @apply mt-20 mb-10;
  }

  section > div {
    @apply bg-white my-10 py-10 px-20 rounded;
    @apply flex items-center gap-10;
  }

  section > div > div {
    @apply flex-grow;
  }

  section a {
    @apply btn btn-alt;
  }

  footer {
    @apply p-50 flex justify-center;
  }

  footer a,
  button[type="submit"] {
    @apply btn btn-default btn-big;
  }
</style>
