---
import Layout from "../layouts/App.astro";
import { Icon } from "astro-icon";
import { formatDateTime } from "@utils/date";
import Badge, { BadgeStyle } from "@components/Badge.astro";
import EmptyScreen from "@components/EmptyScreen.astro";
import ChangeNameButton from "@components/ChangeNameButton.astro";
import ChangeNameModal from "@components/ChangeNameModal.astro";
import pageTitle from "@utils/pageTitle";
import Toast from "@components/Toast.astro";
import { ERROR_PARAM, ToastStatus } from "@utils/toasts";
import {
  DOCUMENT_NAME_CHANGED,
  DRAFT_SAVED,
  DRAFT_SAVED_PARAM,
  DOCUMENT_NAME_PARAM,
  DRAFT_REMOVED,
  DRAFT_REMOVED_PARAM,
  ERROR,
  COPY_DOCUMENT_PARAM,
  COPY_DOCUMENT,
} from "@utils/toasts";
import * as PARAMS from "@utils/urlParams";
import DeleteDraftButton from "@components/DeleteDraftButton.astro";
import CopyDocumentButton from "@components/CopyDocumentButton.astro";
import Pagination from "@components/Pagination.astro";
import routes from "@utils/routes";
import { changeDocumentName } from "@api/documents";
import { getDocuments } from "@api/documents";
import { UserDocuments } from "@type";
import { captureError } from "@utils/sentry";

const urlParams = new URL(Astro.request.url).searchParams;
const PAGE_TITLE = "Moje dokumenty";
const page = urlParams.get(PARAMS.PAGE) || undefined;

let documents: UserDocuments["documents"],
  pages: UserDocuments["pages"],
  currentPage: UserDocuments["currentPage"],
  toast: string | null = null,
  toastStatus;

try {
  ({ documents, pages, currentPage } = await getDocuments(
    `${Astro.request.headers.get("cookie")}`,
    page
  ));
} catch (e) {
  if (e instanceof Error && e.cause === 401) {
    return Astro.redirect(
      `${routes.SIGN_IN}?${PARAMS.REDIRECT}=${Astro.url.pathname}`
    );
  } else {
    captureError(e);
    return Astro.redirect(routes.NOT_FOUND);
  }
}

if (urlParams.has(DRAFT_SAVED_PARAM)) {
  toast = DRAFT_SAVED;
}

if (urlParams.has(DOCUMENT_NAME_PARAM)) {
  toast = DOCUMENT_NAME_CHANGED;
}

if (urlParams.has(DRAFT_REMOVED_PARAM)) {
  if (Boolean(Number(urlParams.get(DRAFT_REMOVED_PARAM)))) {
    toast = DRAFT_REMOVED;
    toastStatus = ToastStatus.default;
  } else {
    toast = ERROR;
    toastStatus = ToastStatus.error;
  }
}

if (urlParams.has(COPY_DOCUMENT_PARAM)) {
  if (Boolean(Number(urlParams.get(COPY_DOCUMENT_PARAM)))) {
    toast = COPY_DOCUMENT;
    toastStatus = ToastStatus.default;
  } else {
    toast = ERROR;
    toastStatus = ToastStatus.error;
  }
}

if (urlParams.has(ERROR_PARAM)) {
  toast = ERROR;
  toastStatus = ToastStatus.error;
}

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const title = String(formData.get("title"));
  const docId = String(formData.get("template"));
  const redirectUrl = new URL(Astro.request.url);

  try {
    await changeDocumentName(
      `${Astro.request.headers.get("cookie")}`,
      docId,
      title
    );

    redirectUrl.searchParams.set(DOCUMENT_NAME_PARAM, "true");
  } catch {
    redirectUrl.searchParams.set(ERROR_PARAM, "true");
  } finally {
    return Astro.redirect(redirectUrl);
  }
}

function getDateLabel(created: Date, modified: Date) {
  return modified > created ? "Ostatnia zmiana" : "Utworzony";
}
---

<Layout title={pageTitle(PAGE_TITLE)}>
  <span slot="topbar-title">{PAGE_TITLE}</span>
  {
    Object.keys(documents).length ? (
      <>
        <section>
          {Object.keys(documents).map((monthYear) => (
            <>
              <h6>{monthYear}</h6>
              {documents[monthYear].map(
                ({
                  doc,
                  _id,
                  title,
                  created,
                  draft,
                  modified,
                  shared,
                  template,
                }) => (
                  <div>
                    <header>
                      <a
                        href={`${Astro.url.origin}${routes.DOCUMENTS}/${_id}${
                          draft ? routes.SUMMARY : routes.DOCUMENT
                        }`}
                      >
                        <span>{title}</span>
                        {draft && <Badge>Szkic</Badge>}
                        {shared && (
                          <Badge style={BadgeStyle.purple}>Wysłany</Badge>
                        )}
                      </a>
                      <a href={`${Astro.url.origin}/dokumenty/${doc}`}>
                        <Icon name="document" width={16} height={16} />
                        {template}
                      </a>
                    </header>
                    {draft ? (
                      <dl>
                        <dt>{getDateLabel(created, modified)}</dt>
                        <dd>
                          <time>{formatDateTime(modified)}</time>
                        </dd>
                      </dl>
                    ) : (
                      <time>{formatDateTime(modified)}</time>
                    )}
                    <aside>
                      {draft && <DeleteDraftButton id={_id} />}
                      <ChangeNameButton
                        id={_id}
                        title={title}
                        label="Zmień nazwę"
                      />
                      <CopyDocumentButton id={_id} />
                    </aside>
                  </div>
                )
              )}
            </>
          ))}
          <Pagination
            pages={pages}
            currentPage={currentPage}
            url={`${Astro.url.origin}/moje-dokumenty`}
          />
        </section>
      </>
    ) : (
      <EmptyScreen
        icon="document"
        cta="Stwórz pierwszy dokument"
        ctaUrl={`${Astro.url.origin}/dokumenty`}
      >
        Nie masz jeszcze dokumentów
      </EmptyScreen>
    )
  }
  <ChangeNameModal />
  {toast && <Toast info={toast} status={toastStatus} />}
</Layout>

<style>
  section {
    @apply flex gap-20 flex-wrap w-full max-w-[1024px] mx-auto py-20;
  }

  section > div {
    @apply px-20 py-15 bg-white rounded-lg w-full;
    @apply grid grid-cols-2 sm:grid-cols-4 gap-15 items-center sm:items-start;
  }

  section > div > header {
    @apply col-span-2;
    @apply flex flex-col gap-[5px];
  }

  section > div > header a {
    @apply text-sm;
    @apply flex gap-[5px] items-center;
    @apply text-dark55;
  }

  section > div > header a:not(:hover) span {
    @apply text-dark90;
  }

  section > div > header a span {
    @apply text-xl line-clamp-3;
  }

  section > div > dl dt {
    @apply text-xs text-dark40;
  }

  section > div > dl dt:not(:first-child) {
    @apply pt-10;
  }

  section > div > aside {
    @apply flex gap-15 items-center justify-end self-center;
  }

  section > div > aside a {
    @apply btn btn-alt;
  }

  section small {
    @apply block;
  }

  h6 {
    @apply font-bold text-xs;
  }

  section > div :global(change-name-button span) {
    @apply hidden md:inline-block;
  }
</style>
