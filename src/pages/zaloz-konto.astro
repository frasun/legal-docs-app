---
import Layout from "../layouts/Layout.astro";
import {
  getUserByEmail,
  initAccountVerify,
  verificationInProgress,
} from "@db/user";
import sendEmail from "@utils/email";
import error from "@utils/errors";
import pageTitle from "@utils/pageTitle";
import AuthForm from "@components/AuthForm.astro";
import InputGroup, { InputType } from "@components/InputGroup.astro";
import * as PARAMS from "@utils/urlParams";
import routes from "@utils/routes";

let errors = [],
  userEmail,
  userPassword;

const url = new URL(Astro.request.url);

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const email = String(formData.get("email"));
  const password = String(formData.get("password"));
  const tos = String(formData.get("tos"));

  userEmail = email;
  userPassword = password;

  if (tos !== "on") {
    errors.push(error.ACCEPT_TERMS);
  } else {
    const user = await getUserByEmail(email);

    if (user) {
      errors.push(error.EMAIL_TAKEN);
    } else {
      const redirectParam = url.searchParams.get(PARAMS.REDIRECT);
      const docParam = url.searchParams.get(PARAMS.DOCUMENT);
      const draftParam = url.searchParams.get(PARAMS.DRAFT);
      const redirectUrl = new URL(routes.VERIFY, Astro.url.origin);
      const alreadyInitialised = await verificationInProgress(email);

      if (alreadyInitialised) {
        errors.push(error.EMAIL_TAKEN);
      } else {
        try {
          const code = await initAccountVerify(email, password);
          await sendEmail(email, code);
        } catch (e) {
          if (e instanceof Error) {
            errors.push(e.message);
          }
        }
      }

      redirectUrl.searchParams.append(PARAMS.EMAIL, decodeURIComponent(email));

      if (redirectParam) {
        redirectUrl.searchParams.append(PARAMS.REDIRECT, redirectParam);

        if (docParam) {
          redirectUrl.searchParams.append(PARAMS.DOCUMENT, docParam);
        }

        if (draftParam) {
          redirectUrl.searchParams.append(PARAMS.DRAFT, draftParam);
        }
      }

      if (!errors.length) {
        return Astro.redirect(redirectUrl);
      }
    }
  }
}
---

<Layout title={pageTitle("Załóż konto")}>
  <AuthForm>
    <h1 slot="form-header">Załóż konto</h1>
    <InputGroup>
      <label for="email">Adres e-mail</label>
      <input id="email" type="email" name="email" required value={userEmail} />
    </InputGroup>
    <InputGroup>
      <label for="password">Hasło</label>
      <input
        id="password"
        type="password"
        name="password"
        value={userPassword}
        required
        pattern="(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,20}$"
      />
      <small
        >Hasło powinno mieć co najmniej 8 znaków, maksymalnie 20 znaków, w tym
        przynajmniej jedną wielką literę i jedną cyfrę</small
      >
    </InputGroup>
    <InputGroup type={InputType.checkbox}>
      <input type="checkbox" name="tos" id="tos" required />
      <label for="tos">
        Akceptuję warunki <a href={routes.TOS} target="_blank">regulaminu</a>
      </label>
    </InputGroup>
    <button type="submit">Załóż konto</button>
    {
      errors.length
        ? errors.map((error) => <p slot="after-submit">{error}</p>)
        : null
    }
    <footer slot="form-footer">
      Masz już konto?
      <a href={`${routes.SIGN_IN}${url.search}`}>Zaloguj się</a>
    </footer>
  </AuthForm>
</Layout>
