---
interface Props {
  options: string[];
  labels: string[];
  token: string[];
  selected: string[];
  fieldId?: string;
}

const { options, labels, token, selected, fieldId } = Astro.props;
---

<radio-grid>
  <header class={`hidden md:grid grid-cols-${options.length}`}>
    {options.map((opt) => <div>{opt}</div>)}
  </header>
  <fieldset class={`grid-cols-${options.length}`}>
    {
      labels.map((label, labelIndex) => (
        <>
          <label>{label}</label>
          {options.map((opt, index) => {
            return index > 0 ? (
              <div>
                <input
                  type="radio"
                  id={`rd-${labelIndex}-${index}`}
                  name={label}
                  value={opt}
                  aria-label={`${opt}`}
                  checked={selected[index - 1].includes(label)}
                />
                <label for={`rd-${labelIndex}-${index}`}>{opt}</label>
              </div>
            ) : null;
          })}
        </>
      ))
    }
  </fieldset>
  {
    token.map((t, index) => (
      <input
        type="hidden"
        name={t}
        id={options[index + 1]}
        value={selected[index].toString()}
        data-type="array"
        data-key={fieldId}
      />
    ))
  }
</radio-grid>

<style>
  radio-grid {
    @apply flex flex-col gap-10;
  }

  radio-grid fieldset {
    @apply md:grid md:gap-y-10 gap-x-0;
  }

  header {
    @apply font-bold text-sm;
  }

  header div:first-child {
    @apply px-20;
  }

  header div:not(:first-child),
  fieldset div {
    @apply md:text-center;
  }

  fieldset div,
  fieldset label {
    @apply md:bg-white md:px-20 md:py-15;
  }

  fieldset > label {
    @apply font-serif italic text-dark90 text-xl;
  }

  fieldset > label:not(:first-child) {
    @apply mt-15 md:mt-0;
  }

  fieldset div > label {
    @apply md:hidden ml-10;
  }
</style>

<script>
  import "@wc/RadioGrid";
</script>
