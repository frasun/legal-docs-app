---
import Layout from "../layouts/Layout.astro";
import { getSession } from "auth-astro/server";
import pageTitle from "@utils/pageTitle";
import AuthForm from "@components/AuthForm.astro";
import InputGroup from "@components/InputGroup.astro";
import * as PARAMS from "@utils/urlParams";

const session = await getSession(Astro.request);

if (session) {
  return Astro.redirect("/moje-dokumenty");
}

const url = new URL(Astro.request.url);
const redirectParam = url.searchParams.get(PARAMS.REDIRECT);
const docParam = url.searchParams.get(PARAMS.DOCUMENT);
const draftParam = url.searchParams.get(PARAMS.DRAFT);

const redirectUrl = redirectParam
  ? new URL(redirectParam, Astro.url.origin)
  : null;

if (redirectUrl) {
  if (docParam) {
    redirectUrl.searchParams.append(PARAMS.DOCUMENT, docParam);
  }

  if (draftParam) {
    redirectUrl.searchParams.append(PARAMS.DRAFT, draftParam);
  }
}
---

<Layout title={pageTitle("Zaloguj się")}>
  <login-form redirect={redirectUrl}>
    <AuthForm>
      <h1 slot="form-header">Zaloguj się</h1>
      <InputGroup>
        <label for="email">Adres e-mail</label>
        <input id="email" type="email" name="email" required />
      </InputGroup>
      <InputGroup>
        <label for="password">Hasło</label>
        <input id="password" type="password" name="password" required />
      </InputGroup>
      <button type="submit">Zaloguj się</button>
      <footer slot="form-footer">
        Nie masz jeszcze konta?
        <a href={`${Astro.url.origin}/zaloz-konto${url.search}`}>
          Załóż konto
        </a>
      </footer>
    </AuthForm>
  </login-form>
</Layout>

<script>
  import { signIn } from "auth-astro/client";
  import errors from "@utils/errors";

  class LoginForm extends HTMLElement {
    form?: HTMLFormElement;
    redirect?: string;

    constructor() {
      super();

      this.form = this.querySelector("form") || undefined;
      this.redirect = this.getAttribute("redirect") || undefined;
    }

    connectedCallback() {
      if (this.form) {
        this.form.addEventListener("submit", async (e) => {
          e.preventDefault();

          const formData = new FormData(this.form);
          const email = String(formData.get("email"));
          const password = String(formData.get("password"));

          this.hideError();

          const response = await signIn("credentials", {
            redirect: false,
            email,
            password,
            callbackUrl: `${
              this.redirect
                ? this.redirect
                : `${document.location.origin}/moje-dokumenty`
            }`,
          });

          response && this.showError();
        });
      }
    }

    showError() {
      const error = document.createElement("p");
      error.id = "error";
      error.innerHTML = errors.WRONG_CREDENTIALS;

      window.setTimeout(() => {
        if (this.form) {
          this.form.append(error);
        }
      }, 200);
    }

    hideError() {
      const error = this.querySelector("#error");

      if (error) error.remove();
    }
  }
  customElements.define("login-form", LoginForm);
</script>
