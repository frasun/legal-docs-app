---
import Layout from "../../layouts/App.astro";
import pageTitle from "@utils/pageTitle";
import imageUrl from "@utils/sanityImage";
import formatDate from "@utils/date";
import Badge, { BadgeSize, BadgeStyle } from "@components/Badge.astro";
import screens from "@utils/screens";
import trimWhitespace from "@utils/whitespace";
import type { Post } from "@type";
import BlogContent from "@components/BlogContent.astro";
import { getPost } from "@api/posts";
import { REDIRECT } from "@utils/urlParams";
import routes from "@utils/routes";
import { captureError } from "@utils/sentry";
import Icon, { IconSize } from "@components/Icon.astro";

const PAGE_TITLE = "Blog";

let title: Post["title"] | undefined,
	publishedAt: Post["publishedAt"],
	mainImage: Post["mainImage"],
	body: Post["body"],
	excerpt: Post["excerpt"],
	keywords: Post["keywords"],
	description: Post["description"],
	documents: Post["documents"];

try {
	({
		title,
		publishedAt,
		mainImage,
		body,
		excerpt,
		keywords,
		description,
		documents,
	} = await getPost(
		`${Astro.request.headers.get("cookie")}`,
		Astro.params.slug as string
	));
} catch (e) {
	if (e instanceof Error) {
		switch (e.cause) {
			case 403:
				return Astro.redirect(
					`${routes.SIGN_IN}?${REDIRECT}=${Astro.url.pathname}`
				);

			case 404:
			case 401:
				return Astro.redirect(routes.NOT_FOUND);

			default:
				captureError(e);
				return Astro.redirect(routes.NOT_FOUND);
		}
	}
}
---

<Layout
	pageName={pageTitle(`${title} - Blog`)}
	description={description ?? trimWhitespace(excerpt || "")}
	keywords={keywords ?? undefined}
	image={mainImage ? imageUrl(mainImage, 1000, 400).url() : undefined}
	title=""
>
	<header>
		{
			mainImage && (
				<figure>
					<picture>
						<source
							media={`(max-width:${screens.sm - 1}px)`}
							srcset={`${imageUrl(mainImage, 600, 500).url()}`}
						/>
						<source
							media={`(min-width:${screens.sm}px)`}
							srcset={`${imageUrl(mainImage, 1000, 400).url()}`}
						/>
						<img
							src={imageUrl(mainImage, 1220, 400).url()}
							alt={title}
							loading="lazy"
							width="100%"
						/>
					</picture>
				</figure>
			)
		}
	</header>
	<article class="prose">
		<header>
			<h1>{title}</h1>
			{
				publishedAt ? (
					<time>Opublikowano {formatDate(publishedAt)}</time>
				) : (
					<Badge size={BadgeSize.medium}>szkic artykułu</Badge>
				)
			}
		</header>
		{body && <BlogContent content={body} />}
	</article>
	{
		documents && (
			<aside>
				<Badge style={BadgeStyle.orange} size={BadgeSize.medium}>
					Powiązane dokumenty
				</Badge>
				<ul>
					{documents.map(({ title, slug }) => (
						<li>
							<a href={`${Astro.url.origin}/dokumenty/${slug}`}>
								<Icon name="document" size={IconSize.sm} />
								{title}
							</a>
						</li>
					))}
				</ul>
			</aside>
		)
	}
</Layout>

<style>
	header {
		@apply col-span-full mt-15;
	}

	article {
		@apply col-span-full md:col-span-7 md:col-start-3 md:pb-60;
	}

	article header {
		@apply flex flex-col items-start gap-15 mt-0;
	}

	header figure {
		@apply rounded-sm overflow-hidden;
	}

	time {
		@apply text-sans-sm;
	}

	aside {
		@apply col-span-full md:col-span-3 md:col-start-10 mt-40 md:mt-60;
		@apply flex flex-col gap-10 items-start;
	}

	aside li a {
		@apply flex gap-10 px-10 py-5;
		@apply text-sans-sm text-black hover:text-active;
	}

	aside li a svg {
		@apply flex-shrink-0;
	}
</style>
