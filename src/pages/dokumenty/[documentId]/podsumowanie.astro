---
import Layout from "../../../layouts/App.astro";
import { getEntry } from "astro:content";
import Answer from "@components/Answer.astro";
import { getDocumentSummary } from "@db/document";
import { getSession } from "auth-astro/server";
import { Icon } from "astro-icon";
import ChangeNameButton from "@components/ChangeNameButton.astro";
import ChangeNameModal from "@components/ChangeNameModal.astro";
import Badge from "@components/Badge.astro";
import pageTitle from "@utils/pageTitle";
import Toast from "@components/Toast.astro";
import {
  DOCUMENT_NAME_CHANGED,
  DOCUMENT_NAME_PARAM,
  ERROR,
  ERROR_PARAM,
  ToastStatus,
} from "@utils/toasts";
import type { Answers } from "@type";
import { deleteSessionDocument, getAllAnswers } from "@db/session";
import { SESSION_COOKIE } from "@utils/cookies";
import getQuesitons from "@utils/questions";
import PaymentModal from "@components/PaymentModal.astro";
import * as PARAMS from "@utils/urlParams";
import { entityEnum } from "@utils/constants";
import { UUID } from "mongodb";
import { UserRoles } from "@db/user";
import routes from "@utils/routes";
import { changeDocumentName } from "@api/documents";

const { documentId: dId } = Astro.params;
const documentId = String(dId);
const userDocumentId = UUID.isValid(documentId);
const session = await getSession(Astro.request);
const isUserDocument = session && userDocumentId;

const ssid = session
  ? session.user?.ssid
  : Astro.cookies.get(SESSION_COOKIE).value;

if (!ssid) {
  return Astro.redirect(routes.NOT_FOUND);
}

if (!userDocumentId) {
  const refererUrl = Astro.request.headers.get("referer");

  if (!refererUrl || !refererUrl.includes(documentId)) {
    await deleteSessionDocument(ssid, documentId);
  }
}

let docId = documentId,
  draft = false,
  answers: Answers = {},
  title,
  canGenerate = true,
  toast: string | null = null,
  toastStatus: ToastStatus = ToastStatus.default;

const urlParams = new URL(Astro.request.url).searchParams;

if (urlParams.has(DOCUMENT_NAME_PARAM)) {
  toast = DOCUMENT_NAME_CHANGED;
  toastStatus = ToastStatus.default;
}

if (urlParams.has(ERROR_PARAM)) {
  toast = ERROR;
  toastStatus = ToastStatus.error;
}

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const title = String(formData.get("title"));
  const docId = String(formData.get("template"));
  const redirectUrl = new URL(Astro.request.url);

  try {
    await changeDocumentName(
      `${Astro.request.headers.get("cookie")}`,
      docId,
      title
    );

    redirectUrl.searchParams.set(DOCUMENT_NAME_PARAM, "true");
  } catch {
    redirectUrl.searchParams.set(ERROR_PARAM, "true");
  } finally {
    return Astro.redirect(redirectUrl);
  }
}

if (isUserDocument) {
  const userId = session.user?.id;

  if (!session || !userId) {
    return Astro.redirect(
      `${routes.SIGN_IN}?${PARAMS.REDIRECT}=${Astro.url.pathname}`
    );
  }

  const data = await getDocumentSummary(documentId, userId);

  if (data) {
    ({ doc: docId, answers, draft, title } = data);
  } else {
    return Astro.redirect(routes.NOT_FOUND);
  }

  if (!draft) {
    return Astro.redirect(`${routes.DOCUMENTS}/${documentId}/dokument`);
  }
}

const document = await getEntry("documents", docId);

if (!document) {
  return Astro.redirect(routes.NOT_FOUND);
}

const {
  data: {
    index,
    title: docTitle,
    dates,
    dataFields,
    draft: draftTemplate,
    memberContent,
  },
} = document;

if (draftTemplate) {
  if (!session || session.user?.role !== UserRoles.admin) {
    return Astro.redirect(routes.NOT_FOUND);
  }
}

if (memberContent && !session) {
  return Astro.redirect(
    `${routes.SIGN_IN}?${PARAMS.REDIRECT}=${Astro.url.pathname}`
  );
}

if (!index) {
  return Astro.redirect(routes.NOT_FOUND);
}

const { questionEntries: questions } = await getQuesitons(index);

if (!Object.keys(answers).length) {
  const qData: Answers = {};
  for (let { data } of questions) {
    const { question, info, ...fields } = data;
    Object.assign(qData, { ...fields });
  }

  try {
    const sessionAnswers = await getAllAnswers(ssid, documentId);

    if (sessionAnswers) {
      answers = sessionAnswers;
    }
  } catch {}

  if (Object.keys(answers).length !== Object.keys(qData).length) {
    for (let field of Object.keys(qData)) {
      if (!(field in answers)) {
        if (dates && dates.includes(field)) {
          answers[field] = new Date();
        } else {
          answers[field] = qData[field];
        }
      }
    }
  }
}

if (dataFields) {
  const required: string[] = [];

  dataFields.map((field) => {
    const dataType = answers[`${field}Type`];

    switch (dataType) {
      case entityEnum[0]:
        required.push(
          `${field}PersonName`,
          `${field}PersonStreet`,
          `${field}PersonPostalCode`,
          `${field}PersonCity`,
          `${field}PersonPin`
        );
        break;
      case entityEnum[1]:
        required.push(
          `${field}CompanyName`,
          `${field}CompanyStreet`,
          `${field}CompanyPostalCode`,
          `${field}CompanyCity`,
          `${field}CompanyPin`
        );
        break;
    }
  });

  canGenerate = required.every(
    (field) => answers[field] !== undefined && answers[field] !== ""
  );
}

if (!title) title = docTitle;

const GENERATE = "Generuj dokument";
---

<Layout title={pageTitle(`Podsumowanie - ${title}`)}>
  <span slot="topbar-title"
    ><span>{title}</span>{draft && <Badge>Szkic</Badge>}</span
  >
  {
    draft && (
      <ChangeNameButton
        id={documentId}
        title={title}
        slot="topbar-after-title"
      />
    )
  }
  <section>
    <h1>Podsumowanie</h1>
    {
      index.map(({ title, questions }) => (
        <>
          <h5>{title}</h5>
          {questions.map(({ title, token, answer, type, id: { slug } }) => (
            <div>
              <div>
                <h6>{title}</h6>
                <Answer
                  data={answers}
                  template={answer}
                  token={token}
                  type={type}
                />
              </div>
              <a href={`${Astro.url.origin}/dokumenty/${documentId}/${slug}`}>
                Zmień
              </a>
            </div>
          ))}
        </>
      ))
    }
    <footer>
      {
        canGenerate ? (
          session ? (
            <a href={`${Astro.url.origin}/zamowienie`}>{GENERATE}</a>
          ) : (
            <show-modal data-modal="payment">
              <button>{GENERATE}</button>
            </show-modal>
          )
        ) : (
          <h4>Aby wygenerować dokument wypełnij wszystkie wymagane pola</h4>
        )
      }
      {
        !isUserDocument && (
          <a
            href={`${Astro.url.origin}/dokument?${PARAMS.DOCUMENT}=${documentId}&${PARAMS.DRAFT}=true`}
          >
            <Icon name="save" width={18} height={18} />
            Zapisz szkic
          </a>
        )
      }
    </footer>
  </section>
  <ChangeNameModal />
  <PaymentModal documentId={documentId} />
  {toast && <Toast info={toast} status={toastStatus} />}
</Layout>
<style>
  section {
    @apply max-w-[1000px] mx-auto w-full mt-20;
  }

  section h1 {
    @apply text-2xl;
  }

  section h5 {
    @apply mt-30 mb-10 font-sans font-bold text-sm tracking-normal text-dark55;
  }

  section > div {
    @apply bg-white my-10 py-15 px-20 rounded-lg;
    @apply flex items-start sm:items-center gap-10;
    @apply flex-col sm:flex-row;
  }

  section > div > div {
    @apply flex-grow;
  }

  section a {
    @apply btn btn-alt;
  }

  footer {
    @apply pt-50;
    @apply flex flex-col justify-center gap-20 items-center;
  }

  footer a {
    @apply btn btn-alt;
  }

  footer a:first-child,
  footer button,
  show-payment-modal button {
    @apply btn btn-default btn-big;
  }
</style>

<script>
  import "@wc/ShowModal";
</script>
