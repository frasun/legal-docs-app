---
import EmptyScreen from "@components/EmptyScreen.astro";
import Layout from "../../layouts/App.astro";
import pageTitle from "@utils/pageTitle";
import {
  IDENTITY_SAVED_PARAM,
  IDENTITY_SAVED,
  IDENTITY_REMOVED,
  IDENTITY_REMOVED_PARAM,
  ERROR_PARAM,
  ERROR,
} from "@utils/toasts";
import Toast from "@components/Toast.astro";
import { entityEnum } from "@utils/constants";
import { DATA_TYPE, REDIRECT } from "@utils/urlParams";
import { deleteIdentity, getIdentities } from "@api/identities";
import type { UserIdentities } from "@type";
import routes from "@utils/routes";
import { ToastStatus } from "@utils/toasts";

const PAGE_TITLE = "Tożsamości";

const urlParams = new URL(Astro.request.url).searchParams;
const dataType = urlParams.get(DATA_TYPE) ?? undefined;
const dataTypeFilter = dataType ? decodeURIComponent(dataType) : undefined;

let identities: UserIdentities["identities"] = [],
  count: UserIdentities["count"] = 0,
  toast: string | null = null,
  toastStatus: ToastStatus = ToastStatus.default;

try {
  ({ identities, count } = await getIdentities(
    `${Astro.request.headers.get("cookie")}`,
    dataTypeFilter
  ));
} catch (e) {
  if (e instanceof Error) {
    switch (e.cause) {
      case 401:
        return Astro.redirect(
          `${routes.SIGN_IN}?${REDIRECT}=${Astro.url.pathname}`
        );
      default:
        return Astro.redirect(routes.NOT_FOUND);
    }
  }
}

if (urlParams.has(IDENTITY_SAVED_PARAM)) {
  toast = IDENTITY_SAVED;
}

if (urlParams.has(IDENTITY_REMOVED_PARAM)) {
  toast = IDENTITY_REMOVED;
}

if (urlParams.has(ERROR_PARAM)) {
  toast = ERROR;
  toastStatus = ToastStatus.error;
}

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const id = formData.get("id");

  try {
    await deleteIdentity(`${Astro.request.headers.get("cookie")}`, String(id));

    return Astro.redirect(
      `${Astro.url.origin}/${routes.IDENTITIES}?${IDENTITY_REMOVED_PARAM}`
    );
  } catch {
    return Astro.redirect(
      `${Astro.url.origin}/${routes.IDENTITIES}?${ERROR_PARAM}`
    );
  }
}
---

<Layout title={pageTitle(PAGE_TITLE)}>
  <span slot="topbar-title">{PAGE_TITLE}</span>
  {
    count > 0 ? (
      <section>
        <header>
          <a href={`${Astro.url.origin}/tozsamosci/dodaj-tozsamosc`}>
            Dodaj tożsamość
          </a>
          <data-type-selector>
            <label for="category">Rodzaj podmiotu</label>
            <select id="category">
              <option value="">Wszystkie</option>
              {entityEnum.map((type) => (
                <option value={type} selected={type === dataTypeFilter}>
                  {`${type[0].toUpperCase()}${type.slice(1)}`}
                </option>
              ))}
            </select>
          </data-type-selector>
        </header>
        {identities.length ? (
          <div>
            {identities.map(({ _id, name, type }) => (
              <div>
                <div>
                  <h3>{name}</h3>
                  <span>{type}</span>
                </div>
                <aside>
                  <a href={`${Astro.url.origin}/tozsamosci/${_id}`}>Edytuj</a>
                  <form method="POST">
                    <input type="hidden" name="id" value={_id} />
                    <button>Usuń</button>
                  </form>
                </aside>
              </div>
            ))}
          </div>
        ) : (
          <EmptyScreen>Brak tożsamości do wyświetlenia</EmptyScreen>
        )}
      </section>
    ) : (
      <EmptyScreen
        icon="id"
        cta="Dodaj tożsamość"
        ctaUrl={`${Astro.url.origin}/tozsamosci/dodaj-tozsamosc`}
      >
        Nie masz jeszcze zapisanych tożsamości
      </EmptyScreen>
    )
  }
  {toast && <Toast info={toast} status={toastStatus} />}
</Layout>

<style>
  section {
    @apply w-full max-w-[1024px] mx-auto py-20 h-full;
    @apply flex flex-col gap-20;
  }

  section > div {
    @apply flex flex-col gap-20;
  }

  section > div > div {
    @apply flex w-full items-center flex-wrap gap-10;
    @apply px-20 py-15 bg-white rounded-lg w-full;
  }

  section > div > div > div {
    @apply flex-grow w-full sm:w-auto;
  }

  section div aside {
    @apply flex gap-10;
  }

  section div a,
  section div button {
    @apply btn btn-alt;
  }

  section header {
    @apply flex justify-between items-center flex-wrap gap-20;
  }

  data-type-selector {
    @apply flex gap-10 items-center;
  }

  section header a {
    @apply btn btn-default btn-big;
    @apply flex-shrink-0;
  }
</style>

<script>
  import "@wc/DataTypeSelector";
</script>
