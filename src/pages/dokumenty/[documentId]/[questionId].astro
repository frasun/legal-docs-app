---
import Layout, { FooterType, LayoutType } from "../../../layouts/App.astro";
import { getEntry } from "astro:content";
import QuestionIndex from "@components/QuestionIndex.astro";
import Badge, { BadgeSize, BadgeStyle } from "@components/Badge.astro";
import QuestionHint from "@components/QuestionHint.astro";
import pageTitle from "@utils/pageTitle";
import QuestionAction from "@components/QuestionAction.astro";
import type { Answers, Question } from "@type";
import { UUID } from "mongodb";
import routes from "@utils/routes";
import { REDIRECT } from "@utils/urlParams";
import { getQuestion } from "@api/templates";
import { captureError } from "@utils/sentry";
import Progressbar from "@components/Progressbar.astro";

const { documentId, questionId } = Astro.params as {
	documentId: string;
	questionId: string;
};
const isUserDocument = UUID.isValid(documentId);
const cookie = `${Astro.request.headers.get("cookie")}`;

let answers: Answers = {},
	qData: Answers = {},
	Content,
	templateId = documentId as string,
	draft: Question["draft"] = false,
	question: Question["question"] = "",
	info: Question["info"],
	documentTitle: Question["documentTitle"] = "",
	index: Question["index"] = [],
	prevId: Question["prevId"],
	nextId: Question["nextId"] = routes.SUMMARY,
	currentQuestionIndex: Question["currentQuestionIndex"] = 0,
	questionShort: Question["questionShort"],
	questionIndex: Question["questionIndex"] = 0,
	prevUrl: string | null = null,
	nextUrl: string | null = null;

// get data
try {
	// get question data
	({
		documentTitle,
		templateId,
		draft,
		index,
		prevId,
		nextId,
		question,
		questionShort,
		info,
		answers,
		currentQuestionIndex,
		questionIndex,
	} = await getQuestion(cookie, documentId, questionId));

	const questionEntry = await getEntry("questions", questionId as string);

	if (!questionEntry) {
		throw new Error(undefined, { cause: 500 });
	}

	({ remarkPluginFrontmatter: qData, Content } = await questionEntry.render());

	// replace default answers in mdx
	for (let key of Object.keys(qData)) {
		qData[key] = answers[key];
	}

	// // get next/prev links
	prevUrl = prevId
		? `${Astro.url.origin}${routes.DOCUMENTS}/${documentId}/${prevId}`
		: null;

	nextUrl = `${Astro.url.origin}${routes.DOCUMENTS}/${documentId}${
		nextId ? `/${nextId}` : routes.SUMMARY
	}`;
} catch (e) {
	if (e instanceof Error) {
		switch (e.cause) {
			case 403:
				return Astro.redirect(
					`${routes.SIGN_IN}?${REDIRECT}=${Astro.url.pathname}`
				);

			case 303:
				return Astro.redirect(
					`${routes.DOCUMENTS}/${documentId}${routes.DOCUMENT}`
				);

			case 404:
				return Astro.redirect(routes.NOT_FOUND);

			default:
				captureError(e);
				return Astro.redirect(routes.NOT_FOUND);
		}
	}
}
---

<Layout
	pageName={pageTitle(`${questionShort} - ${documentTitle}`)}
	title={documentTitle}
	layout={LayoutType.centered}
	footer={FooterType.short}
	highlightTitle={false}
>
	<Badge slot="topbar-after-title" style={BadgeStyle.blue}>szkic</Badge>
	<Progressbar
		slot="topbar-aside"
		current={currentQuestionIndex + 1}
		steps={questionIndex}
	/>
	<QuestionAction slot="topbar-aside" docId={templateId} draft={draft} />
	<header>
		{
			questionShort && (
				<div>
					<span>{currentQuestionIndex + 1}.</span>
					<Badge size={BadgeSize.medium}>{questionShort}</Badge>
				</div>
			)
		}
		<h2>{question}</h2>
	</header>
	<question-form
		data-document-id={documentId}
		data-next-url={!isUserDocument ? nextUrl : undefined}
		transition-persist
	>
		<form method="POST" spellcheck="false" data-astro-reload>
			{Content && <Content />}
			<footer>
				{
					isUserDocument ? (
						<>
							<a
								href={`${Astro.url.origin}${routes.DOCUMENTS}/${documentId}${routes.SUMMARY}`}
							>
								Wróć do podsumowania
							</a>
							<button type="submit" disabled>
								Zapisz zmiany
							</button>
						</>
					) : (
						<>
							{prevUrl && <a href={prevUrl}>Poprzednie</a>}
							<button type="submit">
								{currentQuestionIndex >= questionIndex - 1
									? "Podsumowanie"
									: "Następne"}
							</button>
						</>
					)
				}
			</footer>
		</form>
	</question-form>
	{
		info && (
			<aside>
				<QuestionHint info={info} />
			</aside>
		)
	}
	{
		index && questionId && (
			<QuestionIndex
				index={index}
				current={questionId}
				documentId={documentId}
				documentTitle={documentTitle}
				slot="footer"
			/>
		)
	}
</Layout>

<style>
	header {
		@apply col-span-12 xl:col-span-6 xl:col-start-4 order-1;
		@apply flex flex-col gap-15 py-15;
	}

	header > div {
		@apply flex items-baseline gap-10;
	}

	header > div span {
		@apply text-sans-sm text-black;
	}

	header h2 {
		@apply text-italic-lg lg:text-italic-xl text-black;
		@apply pb-5;
	}

	question-form {
		@apply col-span-12 xl:col-span-6 xl:col-start-4 order-3 xl:order-2;
		@apply pb-60;
	}

	aside {
		@apply col-span-12 xl:col-span-3 order-2 xl:order-3;
		@apply py-5 pb-30 xl:py-0;
	}

	form {
		@apply flex flex-col gap-20;
	}

	form :global(fieldset) {
		@apply flex flex-col gap-15;
	}

	footer {
		@apply flex flex-wrap sm:flex-nowrap gap-20 items-center justify-center py-15;
	}

	footer a {
		@apply btn btn-alt btn-big;
	}

	footer button[type="submit"] {
		@apply btn btn-default btn-big;
	}

	footer a,
	footer button {
		@apply flex-shrink w-full sm:w-1/2;
	}
</style>

<script>
	import "@wc/QuestionForm";
</script>
